/*==============================================================*/
/* DBMS name:      MariaDB 10                                   */
/* Created on:     11/08/2016 11:00:00                          */
/*==============================================================*/

/*==============================================================*/
/* PROCEDIMIENTOS ALMACENADOS                                   */
/*==============================================================*/
/* LOGIN                                                        */
/* VER_PRODUCTOS_APROVADOS                                      */
/* ENVIAR_NUEVO_PRODUCTO                                        */
/* VER_INSTRUCTORES_CENTRO                                      */
/* REGISTRAR_INSTRUCTOR_CENTRO                                  */
/* NUEVA_LISTA                                                  */
/* NUEVO_ITEM                                                   */
/* NUEVA_AREA                                                   */
/* NUEVA_CATEGORIA                                              */
/* NUEVO_COMENTARIO                                             */
/* NUEVO_DETALLE_LISTA                                          */
/* NUEVA_EVALUACION_ITEM                                        */
/* NUEVA_EVALUACION_LISTA                                       */
/* NUEVO_PROGRAMA                                               */
/* NUEVA_VISITA                                                 */
/* ACTUALIZAR_PRODUCTO                                          */
/* INSERTAR_(nombre de la tabla)                                */
/* EDITAR_(nombre de la tabla)                                  */
/* ELIMINAR_(nombre de la tabla)                                */
/* VER_(nombre de la tabla)                                     */
/*==============================================================*/
/*==============================================================*/

/*==============================================================*/
/* DATABASE name:        MunninProject                          */
/*==============================================================*/

DROP DATABASE IF EXISTS munninProject;
CREATE DATABASE munninProject;
ALTER DATABASE munninProject DEFAULT CHARACTER SET utf8 COLLATE utf8_bin;
USE munninProject;

/*==============================================================*/
/* Table: ESTADO                                                */
/*==============================================================*/

CREATE TABLE estado (
  id_estado INT NOT NULL,
  nombre_estado NVARCHAR(45) NOT NULL,
  PRIMARY KEY (id_estado))
ENGINE = InnoDB;

/*==============================================================*/
/* Table: TIPO_ARCHIVO                                          */
/*==============================================================*/

CREATE TABLE tipo_archivo (
  id_tipo_archivo INT NOT NULL,
  extencion_tipo_archivo NVARCHAR(7) NOT NULL,
  PRIMARY KEY (id_tipo_archivo))
ENGINE = InnoDB;

/*==============================================================*/
/* Table: TIPO_OBJETO_APRENDIZAJE                               */
/*==============================================================*/

CREATE TABLE tipo_objeto_aprendizaje (
  id_tipo_objeto_aprendizaje INT NOT NULL,
  nombre_tipo_obj_apren NVARCHAR(20) NOT NULL,
  PRIMARY KEY (id_tipo_objeto_aprendizaje))
ENGINE = InnoDB;

/*==============================================================*/
/* Table: PRODUCTO                                              */
/*==============================================================*/

CREATE TABLE producto (
  id_producto INT NOT NULL,
  nombre_producto NVARCHAR(100) NOT NULL,
  descripcion_producto NVARCHAR(255) NOT NULL,
  palabras_clave_producto NVARCHAR(200) NOT NULL,
  id_tipo_objeto_aprendizaje_producto INT NOT NULL,
  PRIMARY KEY (id_producto),
  FOREIGN KEY (id_tipo_objeto_aprendizaje_producto)
	REFERENCES tipo_objeto_aprendizaje (id_tipo_objeto_aprendizaje))
ENGINE = InnoDB;

/*==============================================================*/
/* Table: REGIONAL                                               */
/*==============================================================*/

CREATE TABLE Regional (
  id_regional NVARCHAR(10) NOT NULL,
  nombre_regional NVARCHAR(70) NOT NULL,
  PRIMARY KEY (id_regional))
ENGINE = InnoDB;

/*==============================================================*/
/* Table: CIUDAD                                                */
/*==============================================================*/

CREATE TABLE ciudad (
  id_ciudad NVARCHAR(10) NOT NULL,
  nombre_ciudad NVARCHAR(45) NOT NULL,
  PRIMARY KEY (id_ciudad))
ENGINE = InnoDB;

/*==============================================================*/
/* Table: CENTRO                                                */
/*==============================================================*/

CREATE TABLE centro (
  id_centro NVARCHAR(10) NOT NULL,
  nombre_centro NVARCHAR(200) NOT NULL,
  id_regional_centro NVARCHAR(10) NOT NULL,
  id_ciudad_centro NVARCHAR(10) NOT NULL,
  PRIMARY KEY (id_centro),
  FOREIGN KEY (id_regional_centro)
    REFERENCES regional (id_regional),
  FOREIGN KEY (id_ciudad_centro)
    REFERENCES ciudad (id_ciudad))
ENGINE = InnoDB;

/*==============================================================*/
/* Table: VERSION                                               */
/*==============================================================*/

CREATE TABLE version (
  id_version INT NOT NULL,
  numero_version INT NOT NULL,
  url_version NVARCHAR(500) NOT NULL,
  notificacion_version BOOLEAN NOT NULL,
  fecha_version DATE NOT NULL,
  fecha_caducidad_version DATE NULL,
  fecha_aprobacion_version DATE NULL,
  id_estado_version INT NOT NULL,
  id_tipo_archivo_version INT NOT NULL,
  id_producto_version INT NOT NULL,
  id_centro_version NVARCHAR(10) NOT NULL,
  PRIMARY KEY (id_version),
  FOREIGN KEY (id_estado_version )
    REFERENCES estado (id_estado),
  FOREIGN KEY (id_tipo_archivo_version )
    REFERENCES tipo_archivo (id_tipo_archivo),
  FOREIGN KEY (id_producto_version)
    REFERENCES producto (id_producto),
  FOREIGN KEY (id_centro_version)
    REFERENCES centro (id_centro))
ENGINE = InnoDB;



/*==============================================================*/
/* Table: FUNCIONARIO                                           */
/*==============================================================*/

CREATE TABLE funcionario (
  id_funcionario INT NOT NULL,
  documento_funcionario NVARCHAR(8) NOT NULL,
  correo_funcionario NVARCHAR(100) NOT NULL,
  contrasena_funcionario NVARCHAR(255) NOT NULL,
  nombre_funcionario NVARCHAR(70) NOT NULL,
  apellido_funcionario NVARCHAR(70) NOT NULL,
  cargo_funcionario NVARCHAR(45) NOT NULL,
  telefono_funcionario NVARCHAR(10) NULL,
  id_centro_funcionario NVARCHAR(10) NOT NULL,
  activo_funcionario BIT(1) NOT NULL, 
  PRIMARY KEY (id_funcionario),
  UNIQUE INDEX correo_funcionario_UNIQUE (correo_funcionario ASC),
  UNIQUE INDEX documento_funcionario_UNIQUE (documento_funcionario ASC),
  FOREIGN KEY (id_centro_funcionario )
    REFERENCES centro (id_centro))
ENGINE = InnoDB;

/*==============================================================*/
/* Table: AUTOR                                                 */
/*==============================================================*/

CREATE TABLE autor (
  id_funcionario_autor INT NOT NULL,
  id_version_autor INT NOT NULL,
  PRIMARY KEY (id_funcionario_autor, id_version_autor),
  FOREIGN KEY (id_funcionario_autor)
    REFERENCES funcionario (id_funcionario),
  FOREIGN KEY (id_version_autor)
    REFERENCES version (id_version))
ENGINE = InnoDB;

/*==============================================================*/
/* Table: LISTA_CHEQUEO                                         */
/*==============================================================*/

CREATE TABLE lista_chequeo (
  id_lista INT NOT NULL,
  nombre_lista NVARCHAR(100) NOT NULL,
  descripcion_lista NVARCHAR(255) NOT NULL,
  fecha_lista DATE NOT NULL,
  tipo_lista NVARCHAR(20) NOT NULL,
  id_autor_lista INT NOT NULL,
  activo_lista BIT(1) NOT NULL,
  PRIMARY KEY (id_lista),
  FOREIGN KEY (id_autor_lista)
    REFERENCES funcionario (id_funcionario))
ENGINE = InnoDB;

/*==============================================================*/
/* Table: ITEM                                                  */
/*==============================================================*/

CREATE TABLE item (
  id_item INT NOT NULL,
  descriptor_item NVARCHAR(200) NOT NULL,
  id_autor_item INT NOT NULL,
  PRIMARY KEY (id_item),
  FOREIGN KEY (id_autor_item)
    REFERENCES funcionario (id_funcionario))
ENGINE = InnoDB;

/*==============================================================*/
/* Table: DETALLE_LISTA                                         */
/*==============================================================*/

CREATE TABLE detalle_lista (
  id_detalle_lista INT NOT NULL,
  id_lista_detalle_lista INT NOT NULL,
  id_item_detalle_lista INT NOT NULL,
  PRIMARY KEY (id_detalle_lista),
  FOREIGN KEY (id_lista_detalle_lista)
    REFERENCES lista_chequeo (id_lista),
  FOREIGN KEY (id_item_detalle_lista)
    REFERENCES item (id_item))
ENGINE = InnoDB;

/*==============================================================*/
/* Table: EVAL_VERSION_GENERAL                                  */
/*==============================================================*/

CREATE TABLE eval_version_general (
  id_eval_version_general INT NOT NULL,
  id_version_eval_version_general INT NOT NULL,
  id_lista_eval_version_general INT NOT NULL,
  calificacion_eval_version_general BOOLEAN NULL,
  observaciones_eval_version_general NVARCHAR(100) NULL,
  fecha_eval_version_general DATE NULL,
  id_evaluador_eval_version_general INT NOT NULL,
  PRIMARY KEY (id_eval_version_general),
  FOREIGN KEY (id_version_eval_version_general)
    REFERENCES version (id_version),
  FOREIGN KEY (id_lista_eval_version_general)
    REFERENCES lista_chequeo (id_lista),
  FOREIGN KEY (id_evaluador_eval_version_general)
    REFERENCES funcionario (id_funcionario))
ENGINE = InnoDB;

/*==============================================================*/
/* Table: EVAL_DETALLE_LISTA                                    */
/*==============================================================*/

CREATE TABLE eval_detalle_lista (
  id_eval_detalle_lista INT NOT NULL,
  calificacion_eval_detalle_lista BOOLEAN NULL,
  observacion_eval_detalle_lista NVARCHAR(100) NULL,
  id_eval_version_general_eval_detalle_lista INT NOT NULL,
  id_detalle_lista_eval_detalle_lista INT NOT NULL,
  PRIMARY KEY (id_eval_detalle_lista),
  FOREIGN KEY (id_eval_version_general_eval_detalle_lista)
    REFERENCES eval_version_general (id_eval_version_general),
  FOREIGN KEY (id_detalle_lista_eval_detalle_lista)
    REFERENCES detalle_lista (id_detalle_lista))
ENGINE = InnoDB;

/*==============================================================*/
/* Table: ROL                                                   */
/*==============================================================*/

CREATE TABLE rol (
  id_rol INT NOT NULL,
  nombre_rol NVARCHAR(45) NOT NULL,
  PRIMARY KEY (id_rol))
ENGINE = InnoDB;

/*==============================================================*/
/* Table: AREA                                                  */
/*==============================================================*/

CREATE TABLE area (
  id_area INT NOT NULL ,
  nombre_area NVARCHAR(100) NOT NULL ,
  id_centro_area NVARCHAR(10) NOT NULL ,
  PRIMARY KEY (id_area) ,
  FOREIGN KEY (id_centro_area)
    REFERENCES centro (id_centro))
ENGINE = InnoDB;

/*==============================================================*/
/* Table: PROGRAMA                                              */
/*==============================================================*/

CREATE TABLE programa (
  id_programa INT NOT NULL,
  nombre_programa NVARCHAR(50) NOT NULL,
  id_area_programa INT NOT NULL,
  PRIMARY KEY (id_programa),
  FOREIGN KEY (id_area_programa)
    REFERENCES area (id_area))
ENGINE = InnoDB;

/*==============================================================*/
/* Table: COMENTARIO                                            */
/*==============================================================*/

CREATE TABLE comentario (
  id_comentario INT NOT NULL,
  valoracion_comentario NVARCHAR(45) NOT NULL,
  puntuacion_comentario INT NOT NULL,
  fecha_comentario DATE NOT NULL,
  id_producto_comentario INT NOT NULL,
  id_funcionario_comentario INT NOT NULL,
  PRIMARY KEY (id_comentario),
  FOREIGN KEY (id_producto_comentario)
    REFERENCES producto (id_producto),
  FOREIGN KEY (id_funcionario_comentario)
    REFERENCES funcionario (id_funcionario))
ENGINE = InnoDB;

/*==============================================================*/
/* Table: VISITA                                                */
/*==============================================================*/

CREATE TABLE visita (
  fecha_visita DATE NOT NULL,
  id_producto_visita INT NOT NULL,
  id_funcionario_visita INT NOT NULL,
  PRIMARY KEY (fecha_visita, id_producto_visita, id_funcionario_visita),
  FOREIGN KEY (id_producto_visita)
    REFERENCES producto (id_producto),
  FOREIGN KEY (id_funcionario_visita)
    REFERENCES funcionario (id_funcionario))
ENGINE = InnoDB;

/*==============================================================*/
/* Table: CATEGORIA                                             */
/*==============================================================*/

CREATE TABLE Categoria (
  id_categoria INT NOT NULL,
  nombre_categoria NVARCHAR(50) NOT NULL,
  id_centro_categoria NVARCHAR(10) NOT NULL,
  PRIMARY KEY (id_categoria),
  FOREIGN KEY (id_centro_categoria)
    REFERENCES centro (id_centro))
ENGINE = InnoDB;

/*==============================================================*/
/* Table: PROGRAMA_PRODUCTO                                     */
/*==============================================================*/

CREATE TABLE programa_producto (
  id_producto_prog_prod INT NOT NULL,
  id_programa_prog_prod INT NOT NULL,
  PRIMARY KEY (id_producto_prog_prod, id_programa_prog_prod),
  FOREIGN KEY (id_producto_prog_prod)
    REFERENCES producto (id_producto),
  FOREIGN KEY (id_programa_prog_prod)
    REFERENCES programa (id_programa))
ENGINE = InnoDB;

/*==============================================================*/
/* Table: CATEGORIA_PRODUCTO                                    */
/*==============================================================*/

CREATE TABLE categoria_producto (
  id_categoria_cat_prod INT NOT NULL,
  id_producto_cat_prod INT NOT NULL,
  PRIMARY KEY (id_categoria_cat_prod, id_producto_cat_prod),
  FOREIGN KEY (id_categoria_cat_prod)
    REFERENCES Categoria (id_categoria),
  FOREIGN KEY (id_producto_cat_prod)
    REFERENCES producto (id_producto))
ENGINE = InnoDB;

/*==============================================================*/
/* Table: FUNCIONARIO_ROL                                       */
/*==============================================================*/

CREATE TABLE funcionario_rol (
  id_funcionario_funci_rol INT NOT NULL,
  id_rol_funci_rol INT NOT NULL,
  PRIMARY KEY (id_funcionario_funci_rol, id_rol_funci_rol),
  FOREIGN KEY (id_funcionario_funci_rol)
    REFERENCES funcionario (id_funcionario),
  FOREIGN KEY (id_rol_funci_rol)
    REFERENCES rol (id_rol))
ENGINE = InnoDB;

/*==============================================================*/
/* PROCEDIMIENTOS ALMACENADOS                                   */
/*==============================================================*/

/*==============================================================*/
/* SP AREA                                                      */
/*==============================================================*/
DELIMITER $$

/*---insertar area----------------------------------------------*/

DROP PROCEDURE IF EXISTS insertar_area $$
CREATE PROCEDURE insertar_area (
	IN _id_area INT , 
	IN _nombre_area VARCHAR(100) ,
	IN _id_centro_area VARCHAR(10) ) 
BEGIN
	INSERT INTO area
	VALUES (_id_area ,
		_nombre_area ,
		_id_centro_area );
END $$

/*---editar area------------------------------------------------*/

DROP PROCEDURE IF EXISTS editar_area $$
CREATE PROCEDURE editar_area (
	IN _id_area INT , 
	IN _nombre_area VARCHAR(100),
	IN _id_centro_area VARCHAR(10)) 
BEGIN
	UPDATE area 
	SET nombre_area = _nombre_area,
		id_centro_area = _id_centro_area 
	WHERE id_area = _id_area;
END $$

/*---eliminar area----------------------------------------------*/

DROP PROCEDURE IF EXISTS eliminar_area $$
CREATE PROCEDURE eliminar_area (
	IN _id_area INT )
BEGIN
	DELETE FROM area
	WHERE id_area = _id_area;
END $$

/*---ver area---------------------------------------------------*/

DROP PROCEDURE IF EXISTS ver_area $$
CREATE PROCEDURE ver_area (
	IN _id_area INT ) 
BEGIN
	SELECT id_area , 
	nombre_area ,
	id_centro_area 
	FROM area
	WHERE id_area = _id_area;
END $$

DELIMITER ;

/*==============================================================*/
/* SP AUTOR                                                     */
/*==============================================================*/
DELIMITER $$

/*---insertar autor---------------------------------------------*/

DROP PROCEDURE IF EXISTS insertar_autor $$
CREATE PROCEDURE insertar_autor (
	IN _id_funcionario_autor INT ,
	IN _id_version_autor INT ) 
BEGIN
	INSERT INTO autor 
	VALUES (
		_id_funcionario_autor,
		_id_version_autor);
END $$

/*---editar autor-----------------------------------------------*/

DROP PROCEDURE IF EXISTS editar_autor $$
CREATE PROCEDURE editar_autor (
	IN _id_funcionario_autor INT ,
	IN _id_version_autor INT ,
	IN _id_nuevo_funcionario_autor INT ,
	IN _id_nuevo_version_autor INT )
BEGIN
	UPDATE autor
	SET id_funcionario_autor = _id_nuevo_funcionario_autor,
		id_version_autor = _id_nuevo_version_autor
	WHERE id_funcionario_autor = _id_funcionario_autor AND 
		id_version_autor = _id_version_autor;
END $$

/*---eliminar autor---------------------------------------------*/

DROP PROCEDURE IF EXISTS eliminar_autor $$
CREATE PROCEDURE eliminar_autor (
	IN _id_funcionario_autor INT ,
	IN _id_version_autor INT )
BEGIN
	DELETE FROM autor
	WHERE id_funcionario_autor = _id_funcionario_autor AND 
	id_version_autor = _id_version_autor;
END $$

/*---ver autor--------------------------------------------------*/

DROP PROCEDURE IF EXISTS ver_autor $$
CREATE PROCEDURE ver_autor (
	IN _id_funcionario_autor INT ,
	IN _id_version_autor INT )
BEGIN
	SELECT id_funcionario_autor ,
	id_version_autor
	FROM autor
	WHERE id_funcionario_autor = _id_funcionario_autor AND 
	id_version_autor = _id_version_autor;
END $$

DELIMITER ;

/*==============================================================*/
/* SP CATEGORIA                                                 */
/*==============================================================*/
DELIMITER $$

/*---insertar categoria-----------------------------------------*/

DROP PROCEDURE IF EXISTS insertar_categoria $$
CREATE PROCEDURE insertar_categoria (
	IN _id_categoria INT ,
	IN _nombre_categoria VARCHAR(50),
	IN _id_centro_categoria VARCHAR(10))
BEGIN
	INSERT INTO categoria
	VALUES (
		_id_categoria,
		_nombre_categoria,
		_id_centro_categoria);
END $$

/*---editar categoria-------------------------------------------*/

DROP PROCEDURE IF EXISTS editar_categoria $$
CREATE PROCEDURE editar_categoria (
	IN _id_categoria INT ,
	IN _nombre_categoria VARCHAR(50),
	IN _id_centro_categoria VARCHAR(10))
BEGIN
	UPDATE categoria
	SET nombre_categoria = _nombre_categoria,
		id_centro_categoria = _id_centro_categoria
	WHERE id_categoria = _id_categoria;
END $$

/*---eliminar categoria-----------------------------------------*/

DROP PROCEDURE IF EXISTS eliminar_categoria $$
CREATE PROCEDURE eliminar_categoria (
	IN _id_categoria INT )
BEGIN
	DELETE FROM categoria
	WHERE id_categoria = _id_categoria;
END $$

/*---ver categoria----------------------------------------------*/

DROP PROCEDURE IF EXISTS ver_categoria $$
CREATE PROCEDURE ver_categoria (
	IN _id_categoria INT )
BEGIN
	SELECT id_categoria ,
	nombre_categoria ,
	id_centro_categoria
	FROM categoria
	WHERE id_categoria = _id_categoria;
END $$

DELIMITER ;

/*==============================================================*/
/* SP CATEGORIA_PRODUCTO                                        */
/*==============================================================*/
DELIMITER $$

/*---insertar categoria_producto--------------------------------*/

DROP PROCEDURE IF EXISTS insertar_categoria_producto $$
CREATE PROCEDURE insertar_categoria_producto (
	IN _id_categoria_cat_prod INT ,
	IN _id_producto_cat_prod INT )
BEGIN
	INSERT INTO categoria_producto
	VALUES (
		_id_categoria_cat_prod,
		_id_producto_cat_prod );
END $$

/*---editar categoria_producto----------------------------------*/

DROP PROCEDURE IF EXISTS editar_categoria_producto $$
CREATE PROCEDURE editar_categoria_producto (
	IN _id_categoria_cat_prod INT ,
	IN _id_producto_cat_prod INT ,
	IN _id_nuevo_categoria_cat_prod INT ,
	IN _id_nuevo_producto_cat_prod INT )
BEGIN
	UPDATE categoria_producto
	SET id_categoria_cat_prod = _id_nuevo_categoria_cat_prod,
		id_producto_cat_prod = _id_nuevo_producto_cat_prod 
	WHERE id_categoria_cat_prod = _id_categoria_cat_prod AND
		id_producto_cat_prod = _id_producto_cat_prod;
END $$

/*---eliminar categoria_producto--------------------------------*/

DROP PROCEDURE IF EXISTS eliminar_categoria_producto $$
CREATE PROCEDURE eliminar_categoria_producto (
	IN _id_categoria_cat_prod INT ,
	IN _id_producto_cat_prod INT )
BEGIN
	DELETE FROM categoria_producto
	WHERE id_categoria_cat_prod = _id_categoria_cat_prod AND
		id_producto_cat_prod = _id_producto_cat_prod;
END $$

/*---ver categoria_producto-------------------------------------*/

DROP PROCEDURE IF EXISTS ver_categoria_producto $$
CREATE PROCEDURE ver_categoria_producto (
	IN _id_categoria_cat_prod INT ,
	IN _id_producto_cat_prod INT )
BEGIN
	SELECT id_categoria_cat_prod,
	id_producto_cat_prod
	FROM categoria_producto
	WHERE id_categoria_cat_prod = _id_categoria_cat_prod AND
		id_producto_cat_prod = _id_producto_cat_prod;
END $$

DELIMITER ;

/*==============================================================*/
/* SP CENTRO                                                    */
/*==============================================================*/
DELIMITER $$

/*---insertar centro--------------------------------------------*/

DROP PROCEDURE IF EXISTS insertar_centro $$
CREATE PROCEDURE insertar_centro (
	IN _id_centro VARCHAR(10),
	IN _nombre_centro VARCHAR(200),
	IN _id_regional_centro VARCHAR(10),
	IN _id_ciudad_centro VARCHAR(10))
BEGIN
	INSERT INTO centro
	VALUES (
		_id_centro ,
		_nombre_centro ,
		_id_regional_centro ,
		_id_ciudad_centro );
END $$

/*---editar centro----------------------------------------------*/

DROP PROCEDURE IF EXISTS editar_centro $$
CREATE PROCEDURE editar_centro (
	IN _id_centro VARCHAR(10),
	IN _nombre_centro VARCHAR(200),
	IN _id_regional_centro VARCHAR(10),
	IN _id_ciudad_centro VARCHAR(10))
BEGIN
	UPDATE centro
	SET nombre_centro = _nombre_centro ,
		id_regional_centro = _id_regional_centro ,
		id_ciudad_centro = _id_ciudad_centro 
	WHERE id_centro = _id_centro ;
END $$

/*---eliminar centro--------------------------------------------*/

DROP PROCEDURE IF EXISTS eliminar_centro $$
CREATE PROCEDURE eliminar_centro (
	IN _id_centro VARCHAR(10))
BEGIN
	DELETE FROM centro
	WHERE id_centro = _id_centro ;
END $$

/*---ver centro-------------------------------------------------*/

DROP PROCEDURE IF EXISTS ver_centro $$
CREATE PROCEDURE ver_centro (
	IN _id_centro VARCHAR(10))
BEGIN
	SELECT id_centro ,
	nombre_centro ,
	id_regional_centro ,
	id_ciudad_centro
	FROM centro
	WHERE id_centro = _id_centro ;
END $$

DELIMITER ;

/*==============================================================*/
/* SP CIUDAD                                                    */
/*==============================================================*/
DELIMITER $$

/*---insertar ciudad--------------------------------------------*/

DROP PROCEDURE IF EXISTS insertar_ciudad $$
CREATE PROCEDURE insertar_ciudad (
	IN _id_ciudad VARCHAR(10),
	IN _nombre_ciudad VARCHAR(45))
BEGIN
	INSERT INTO ciudad
	VALUES (
		_id_ciudad ,
		_nombre_ciudad );
END $$

/*---editar ciudad----------------------------------------------*/

DROP PROCEDURE IF EXISTS editar_ciudad $$
CREATE PROCEDURE editar_ciudad (
	IN _id_ciudad VARCHAR(10),
	IN _nombre_ciudad VARCHAR(45))
BEGIN
	UPDATE ciudad
	SET nombre_ciudad = _nombre_ciudad
	WHERE id_ciudad = _id_ciudad ;
END $$

/*---eliminar ciudad--------------------------------------------*/

DROP PROCEDURE IF EXISTS eliminar_ciudad $$
CREATE PROCEDURE eliminar_ciudad (
	IN _id_ciudad VARCHAR(10))
BEGIN
	DELETE FROM ciudad
	WHERE id_ciudad = _id_ciudad ;
END $$

/*---ver ciudad-------------------------------------------------*/

DROP PROCEDURE IF EXISTS ver_ciudad $$
CREATE PROCEDURE ver_ciudad (
	IN _id_ciudad VARCHAR(10))
BEGIN
	SELECT id_ciudad ,
	nombre_ciudad
	FROM ciudad
	WHERE id_ciudad = _id_ciudad ;
END $$

DELIMITER ;

/*==============================================================*/
/* SP COMENTARIO                                                */
/*==============================================================*/
DELIMITER $$

/*---insertar comentario----------------------------------------*/

DROP PROCEDURE IF EXISTS insertar_comentario $$
CREATE PROCEDURE insertar_comentario (
	IN _id_comentario INT  ,
	IN _valoracion_comentario VARCHAR(45) ,
	IN _puntuacion_comentario INT ,
	IN _fecha_comentario DATE ,
	IN _id_producto_comentario INT ,
        IN _id_funcionario_comentario INT )
BEGIN
	INSERT INTO comentario
	VALUES (
		_id_comentario ,
		_valoracion_comentario ,
		_puntuacion_comentario ,
		_fecha_comentario ,
		_id_producto_comentario ,
                _id_funcionario_comentario );
END $$

/*---editar comentario------------------------------------------*/

DROP PROCEDURE IF EXISTS editar_comentario $$
CREATE PROCEDURE editar_comentario (
	IN _id_comentario INT ,
	IN _valoracion_comentario VARCHAR(45) ,
	IN _puntuacion_comentario INT ,
	IN _fecha_comentario DATE ,
	IN _id_producto_comentario INT ,
        IN _id_funcionario_comentario INT )
BEGIN
	UPDATE comentario
	SET valoracion_comentario = _valoracion_comentario ,
		puntuacion_comentario = _puntuacion_comentario ,
		fecha_comentario = _fecha_comentario ,
		id_producto_comentario = _id_producto_comentario ,
                id_funcionario_comentario = _id_funcionario_comentario
	WHERE id_comentario = _id_comentario ;
END $$

/*---eliminar comentario----------------------------------------*/

DROP PROCEDURE IF EXISTS eliminar_comentario $$
CREATE PROCEDURE eliminar_comentario (
	IN _id_comentario INT )
BEGIN
	DELETE FROM comentario
	WHERE id_comentario = _id_comentario ;
END $$

/*---ver comentario---------------------------------------------*/

DROP PROCEDURE IF EXISTS ver_comentario $$
CREATE PROCEDURE ver_comentario (
	IN _id_comentario INT )
BEGIN
	SELECT id_comentario ,
	valoracion_comentario ,
	puntuacion_comentario ,
	fecha_comentario ,
	id_producto_comentario ,
        id_funcionario_comentario
	FROM comentario
	WHERE id_comentario = _id_comentario ;
END $$

DELIMITER ;

/*==============================================================*/
/* SP DETALLE_LISTA                                             */
/*==============================================================*/
DELIMITER $$

/*---insertar detalle_lista-------------------------------------*/

DROP PROCEDURE IF EXISTS insertar_detalle_lista $$
CREATE PROCEDURE insertar_detalle_lista (
	IN _id_detalle_lista INT ,
	IN _id_lista_detalle_lista INT ,
	IN _id_item_detalle_lista INT )
BEGIN
	INSERT INTO detalle_lista
	VALUES (
		_id_detalle_lista ,
		_id_lista_detalle_lista ,
		_id_item_detalle_lista );
END $$

/*---editar detalle_lista---------------------------------------*/

DROP PROCEDURE IF EXISTS editar_detalle_lista $$
CREATE PROCEDURE editar_detalle_lista (
	IN _id_detalle_lista INT ,
	IN _id_lista_detalle_lista INT ,
	IN _id_item_detalle_lista INT )
BEGIN
	UPDATE detalle_lista
	SET id_lista_detalle_lista = _id_lista_detalle_lista ,
		id_item_detalle_lista = _id_item_detalle_lista
	WHERE id_detalle_lista = _id_detalle_lista ;
END $$

/*---eliminar detalle_lista-------------------------------------*/

DROP PROCEDURE IF EXISTS eliminar_detalle_lista $$
CREATE PROCEDURE eliminar_detalle_lista (
	IN _id_detalle_lista INT )
BEGIN
	DELETE FROM detalle_lista
	WHERE id_detalle_lista = _id_detalle_lista;
END $$

/*---ver detalle_lista------------------------------------------*/

DROP PROCEDURE IF EXISTS ver_detalle_lista $$
CREATE PROCEDURE ver_detalle_lista (
	IN _id_detalle_lista INT )
BEGIN
	SELECT id_detalle_lista ,
	id_lista_detalle_lista ,
	id_item_detalle_lista
	FROM detalle_lista
	WHERE id_detalle_lista = _id_detalle_lista ;
END $$

DELIMITER ;

/*==============================================================*/
/* SP ESTADO                                                    */
/*==============================================================*/

DELIMITER $$

/*---insertar estado--------------------------------------------*/

DROP PROCEDURE IF EXISTS insertar_estado $$
CREATE PROCEDURE insertar_estado (
	IN _id_estado INT , 
	IN _nombre_estado VARCHAR(45)) 
BEGIN
	INSERT INTO estado 
	VALUES (
		_id_estado , 
		_nombre_estado );
END $$

/*---editar estado----------------------------------------------*/

DROP PROCEDURE IF EXISTS editar_estado $$
CREATE PROCEDURE editar_estado (
	IN _id_estado INT , 
	IN _nombre_estado VARCHAR(45)) 
BEGIN
	UPDATE estado 
	SET nombre_estado = _nombre_estado 
	WHERE id_estado = _id_estado;
END $$

/*---eliminar estado--------------------------------------------*/

DROP PROCEDURE IF EXISTS eliminar_estado $$
CREATE PROCEDURE eliminar_estado (
	IN _id_estado INT )
BEGIN
	DELETE FROM estado
	WHERE id_estado=_id_estado;
END $$

/*---ver estado-------------------------------------------------*/

DROP PROCEDURE IF EXISTS ver_estado $$
CREATE PROCEDURE ver_estado (
	IN _id_estado INT ) 
BEGIN
	SELECT id_estado , 
	nombre_estado
	FROM estado 
	WHERE id_estado = _id_estado;
END $$

DELIMITER ;

/*==============================================================*/
/* SP EVAL_DETALLE_LISTA                                        */
/*==============================================================*/

DELIMITER $$

/*---insertar eval_detalle_lista--------------------------------*/

DROP PROCEDURE IF EXISTS insertar_eval_detalle_lista $$
CREATE PROCEDURE insertar_eval_detalle_lista (
	IN _id_eval_detalle_lista INT , 
	IN _calificacion_eval_detalle_lista BOOlEAN ,
	IN _observacion_eval_detalle_lista VARCHAR(100) ,
	IN _id_eval_version_general_eval_detalle_lista INT ,
	IN _id_detalle_lista_eval_detalle_lista INT )
BEGIN
	INSERT INTO eval_detalle_lista
	VALUES (
		_id_eval_detalle_lista ,
		_calificacion_eval_detalle_lista ,
		_observacion_eval_detalle_lista ,
		_id_eval_version_general_eval_detalle_lista ,
		_id_detalle_lista_eval_detalle_lista );
END $$

/*---editar eval_detalle_lista----------------------------------*/

DROP PROCEDURE IF EXISTS editar_eval_detalle_lista $$
CREATE PROCEDURE editar_eval_detalle_lista (
	IN _id_eval_detalle_lista INT , 
	IN _calificacion_eval_detalle_lista BOOlEAN ,
	IN _observacion_eval_detalle_lista VARCHAR(100) ,
	IN _id_eval_version_general_eval_detalle_lista INT ,
	IN _id_detalle_lista_eval_detalle_lista INT )
BEGIN
	UPDATE eval_detalle_lista
	SET calificacion_eval_detalle_lista = _calificacion_eval_detalle_lista ,
		observacion_eval_detalle_lista = _observacion_eval_detalle_lista ,
		id_eval_version_general_eval_detalle_lista = _id_eval_version_general_eval_detalle_lista ,
		id_detalle_lista_eval_detalle_lista = _id_detalle_lista_eval_detalle_lista 
	WHERE id_eval_detalle_lista = _id_eval_detalle_lista ;
END $$

/*---eliminar eval_detalle_lista--------------------------------*/

DROP PROCEDURE IF EXISTS eliminar_eval_detalle_lista $$
CREATE PROCEDURE eliminar_eval_detalle_lista (
	IN _id_eval_detalle_lista INT )
BEGIN
	DELETE FROM eval_detalle_lista
	WHERE id_eval_detalle_lista = _id_eval_detalle_lista ;
END $$

/*---ver eval_detalle_lista-------------------------------------*/

DROP PROCEDURE IF EXISTS ver_eval_detalle_lista $$
CREATE PROCEDURE ver_eval_detalle_lista (
	IN _id_eval_detalle_lista INT ) 
BEGIN
	SELECT id_eval_detalle_lista ,
	calificacion_eval_detalle_lista ,
	observacion_eval_detalle_lista ,
	id_eval_version_general_eval_detalle_lista ,
	id_detalle_lista_eval_detalle_lista
	FROM eval_detalle_lista
	WHERE id_eval_detalle_lista = _id_eval_detalle_lista ;
END $$

DELIMITER ;

/*==============================================================*/
/* SP EVAL_VERSION_GENERAL                                      */
/*==============================================================*/

DELIMITER $$

/*---insertar eval_version_general------------------------------*/

DROP PROCEDURE IF EXISTS insertar_eval_version_general $$
CREATE PROCEDURE insertar_eval_version_general (
	IN _id_eval_version_general INT ,
	IN _id_version_eval_version_general INT ,
	IN _id_lista_eval_version_general INT ,
	IN _calificacion_eval_version_general BOOLEAN ,
	IN _observaciones_eval_version_general VARCHAR(100) ,
	IN _fecha_eval_version_general DATE ,
	IN _id_evaluador_eval_version_general INT )
BEGIN
	INSERT INTO eval_version_general
	VALUES (
		_id_eval_version_general ,
		_id_version_eval_version_general ,
		_id_lista_eval_version_general ,
		_calificacion_eval_version_general ,
		_observaciones_eval_version_general ,
		_fecha_eval_version_general ,
		_id_evaluador_eval_version_general );
END $$

/*---editar eval_version_general--------------------------------*/

DROP PROCEDURE IF EXISTS editar_eval_version_general $$
CREATE PROCEDURE editar_eval_version_general (
	IN _id_eval_version_general INT ,
	IN _id_version_eval_version_general INT ,
	IN _id_lista_eval_version_general INT ,
	IN _calificacion_eval_version_general BOOLEAN ,
	IN _observaciones_eval_version_general VARCHAR(100) ,
	IN _fecha_eval_version_general DATE ,
	IN _id_evaluador_eval_version_general INT )
BEGIN
	UPDATE eval_version_general
	SET id_version_eval_version_general = _id_version_eval_version_general ,
		id_lista_eval_version_general = _id_lista_eval_version_general ,
		calificacion_eval_version_general = _calificacion_eval_version_general ,
		observaciones_eval_version_general = _observaciones_eval_version_general ,
		fecha_eval_version_general = _fecha_eval_version_general ,
		id_evaluador_eval_version_general = _id_evaluador_eval_version_general 
	WHERE id_eval_version_general = _id_eval_version_general ;
END $$

/*---eliminar eval_version_general------------------------------*/

DROP PROCEDURE IF EXISTS eliminar_eval_version_general $$
CREATE PROCEDURE eliminar_eval_version_general (
	IN _id_eval_version_general INT )
BEGIN
	DELETE FROM eval_version_general
	WHERE id_eval_version_general = _id_eval_version_general ;
END $$

/*---ver eval_version_general-----------------------------------*/

DROP PROCEDURE IF EXISTS ver_eval_version_general $$
CREATE PROCEDURE ver_eval_version_general (
	IN _id_eval_version_general INT ) 
BEGIN
	SELECT id_eval_version_general ,
	id_version_eval_version_general ,
	id_lista_eval_version_general ,
	calificacion_eval_version_general ,
	observaciones_eval_version_general ,
	fecha_eval_version_general ,
	id_evaluador_eval_version_general
	FROM eval_version_general
	WHERE id_eval_version_general = _id_eval_version_general ;
END $$

DELIMITER ;

/*==============================================================*/
/* SP FUNCIONARIO                                               */
/*==============================================================*/

DELIMITER $$

/*---insertar funcionario---------------------------------------*/

DROP PROCEDURE IF EXISTS insertar_funcionario $$
CREATE PROCEDURE insertar_funcionario (
	IN _id_funcionario INT  ,
	IN _documento_funcionario VARCHAR(8) ,
	IN _correo_funcionario VARCHAR(100) ,
	IN _contrasena_funcionario VARCHAR(255) ,
	IN _nombre_funcionario VARCHAR(70) ,
	IN _apellido_funcionario VARCHAR(70) ,
	IN _cargo_funcionario VARCHAR(45) ,
	IN _telefono_funcionario VARCHAR(10) ,
	IN _id_centro_funcionario VARCHAR(10) ,
        IN _activo_funcionario BIT(1) )
BEGIN
	INSERT INTO funcionario
	VALUES (
		_id_funcionario ,
		_documento_funcionario ,
		_correo_funcionario ,
		_contrasena_funcionario ,
		_nombre_funcionario ,
		_apellido_funcionario ,
		_cargo_funcionario ,
		_telefono_funcionario ,
		_id_centro_funcionario ,
                _activo_funcionario );
END $$

/*---editar funcionaro------------------------------------------*/

DROP PROCEDURE IF EXISTS editar_funcionario $$
CREATE PROCEDURE editar_funcionario (
	IN _id_funcionario INT ,
	IN _documento_funcionario VARCHAR(8) ,
	IN _correo_funcionario VARCHAR(100) ,
	IN _contrasena_funcionario VARCHAR(255) ,
	IN _nombre_funcionario VARCHAR(70) ,
	IN _apellido_funcionario VARCHAR(70) ,
	IN _cargo_funcionario VARCHAR(45) ,
	IN _telefono_funcionario VARCHAR(10) ,
	IN _id_centro_funcionario VARCHAR(10) ,
        IN _activo_funcionario BIT(1) )
BEGIN
	UPDATE funcionario
	SET documento_funcionario = _documento_funcionario ,
		correo_funcionario = _correo_funcionario ,
		contrasena_funcionario = _contrasena_funcionario ,
		nombre_funcionario = _nombre_funcionario ,
		apellido_funcionario = _apellido_funcionario ,
		cargo_funcionario = _cargo_funcionario ,
		telefono_funcionario = _telefono_funcionario ,
		id_centro_funcionario = _id_centro_funcionario ,
                activo_funcionario = _activo_funcionario
	WHERE id_funcionario = _id_funcionario ;
END $$

/*---eliminar funcionario---------------------------------------*/

DROP PROCEDURE IF EXISTS eliminar_funcionario $$
CREATE PROCEDURE eliminar_funcionario (
	IN _id_funcionario INT )
BEGIN
	DELETE FROM funcionario
	WHERE id_funcionario = _id_funcionario ;
END $$

/*---ver funcionario--------------------------------------------*/

DROP PROCEDURE IF EXISTS ver_funcionario $$
CREATE PROCEDURE ver_funcionario (
	IN _id_funcionario INT ) 
BEGIN
	SELECT id_funcionario ,
	documento_funcionario ,
	correo_funcionario ,
	contrasena_funcionario ,
	nombre_funcionario ,
	apellido_funcionario ,
	cargo_funcionario ,
	telefono_funcionario ,
	id_centro_funcionario
	FROM funcionario
	WHERE id_funcionario = _id_funcionario ;
END $$

DELIMITER ;

/*==============================================================*/
/* SP FUNCIONARIO_ROL                                           */
/*==============================================================*/

DELIMITER $$

/*---insertar funcionario_rol-----------------------------------*/

DROP PROCEDURE IF EXISTS insertar_funcionario_rol $$
CREATE PROCEDURE insertar_funcionario_rol (
	IN _id_funcionario_funci_rol INT ,
	IN _id_rol_funci_rol INT )
BEGIN
	INSERT INTO funcionario_rol
	VALUES (
		_id_funcionario_funci_rol ,
		_id_rol_funci_rol );
END $$

/*---editar funcionaro_rol--------------------------------------*/

DROP PROCEDURE IF EXISTS editar_funcionario_rol $$
CREATE PROCEDURE editar_funcionario_rol (
	IN _id_funcionario_funci_rol INT ,
	IN _id_rol_funci_rol INT ,
	IN _id_nuevo_funcionario_funci_rol INT ,
	IN _id_nuevo_rol_funci_rol INT )
BEGIN
	UPDATE funcionario_rol
	SET id_funcionario_funci_rol = _id_nuevo_funcionario_funci_rol ,
		id_rol_funci_rol = _id_nuevo_rol_funci_rol 
	WHERE id_funcionario_funci_rol = _id_funcionario_funci_rol AND
		id_rol_funci_rol = _id_rol_funci_rol ;
END $$

/*---eliminar funcionario_rol-----------------------------------*/

DROP PROCEDURE IF EXISTS eliminar_funcionario_rol $$
CREATE PROCEDURE eliminar_funcionario_rol (
	IN _id_funcionario_funci_rol INT ,
	IN _id_rol_funci_rol INT )
BEGIN
	DELETE FROM funcionario_rol
	WHERE id_funcionario_funci_rol = _id_funcionario_funci_rol AND
		id_rol_funci_rol = _id_rol_funci_rol ;
END $$

/*---ver funcionario_rol----------------------------------------*/

DROP PROCEDURE IF EXISTS ver_funcionario_rol $$
CREATE PROCEDURE ver_funcionario_rol (
	IN _id_funcionario_funci_rol INT ,
	IN _id_rol_funci_rol INT )
BEGIN
	SELECT id_funcionario_funci_rol ,
	id_rol_funci_rol
	FROM funcionario_rol
	WHERE id_funcionario_funci_rol = _id_funcionario_funci_rol AND
		id_rol_funci_rol = _id_rol_funci_rol ;
END $$

DELIMITER ;

/*==============================================================*/
/* SP ITEM                                                      */
/*==============================================================*/

DELIMITER $$

/*---insertar item----------------------------------------------*/

DROP PROCEDURE IF EXISTS insertar_item $$
CREATE PROCEDURE insertar_item (
	IN _id_item INT ,
	IN _descriptor_item VARCHAR(200) ,
	IN _id_autor_item INT )
BEGIN
	INSERT INTO item
	VALUES (
		_id_item ,
		_descriptor_item ,
		_id_autor_item );
END $$

/*---editar item------------------------------------------------*/

DROP PROCEDURE IF EXISTS editar_item $$
CREATE PROCEDURE editar_item (
	IN _id_item INT ,
	IN _descriptor_item VARCHAR(200) ,
	IN _id_autor_item INT )
BEGIN
	UPDATE item
	SET descriptor_item = _descriptor_item ,
		id_autor_item = _id_autor_item 
	WHERE id_item = _id_item ;
END $$

/*---eliminar item----------------------------------------------*/

DROP PROCEDURE IF EXISTS eliminar_item $$
CREATE PROCEDURE eliminar_item (
	IN _id_item INT )
BEGIN
	DELETE FROM item
	WHERE id_item = _id_item ;
END $$

/*---ver item---------------------------------------------------*/

DROP PROCEDURE IF EXISTS ver_item $$
CREATE PROCEDURE ver_item (
	IN _id_item INT )
BEGIN
	SELECT id_item ,
	descriptor_item ,
	id_autor_item
	FROM item
	WHERE id_item = _id_item ;
END $$

DELIMITER ;

/*==============================================================*/
/* SP LISTA_CHEQUEO                                             */
/*==============================================================*/

DELIMITER $$

/*---insertar lista_chequeo-------------------------------------*/

DROP PROCEDURE IF EXISTS insertar_lista_chequeo $$
CREATE PROCEDURE insertar_lista_chequeo (
	IN _id_lista INT ,
	IN _nombre_lista VARCHAR(100) ,
	IN _descripcion_lista VARCHAR(255) ,
	IN _fecha_lista DATE ,
	IN _tipo_lista VARCHAR(20) ,
	IN _id_autor_lista INT ,
        IN _activo_lista BIT(1) )
BEGIN
	INSERT INTO lista_chequeo
	VALUES (
		_id_lista ,
		_nombre_lista ,
		_descripcion_lista ,
		_fecha_lista ,
		_tipo_lista ,
		_id_autor_lista ,
                _activo_lista );
END $$

/*---editar lista_chequeo---------------------------------------*/

DROP PROCEDURE IF EXISTS editar_lista_chequeo $$
CREATE PROCEDURE editar_lista_chequeo (
	IN _id_lista INT ,
	IN _nombre_lista VARCHAR(100) ,
	IN _descripcion_lista VARCHAR(255) ,
	IN _fecha_lista DATE ,
	IN _tipo_lista VARCHAR(20) ,
	IN _id_autor_lista INT ,
        IN _activo_lista BIT(1) )
BEGIN
	UPDATE lista_chequeo
	SET nombre_lista = _nombre_lista ,
		descripcion_lista = _descripcion_lista ,
		fecha_lista = _fecha_lista ,
		tipo_lista = _tipo_lista ,
		id_autor_lista = _id_autor_lista ,
                activo_lista = _activo_lista
	WHERE id_lista = _id_lista ;
END $$

/*---eliminar lista_chequeo-------------------------------------*/

DROP PROCEDURE IF EXISTS eliminar_lista_chequeo $$
CREATE PROCEDURE eliminar_lista_chequeo (
	IN _id_lista INT )
BEGIN
	DELETE FROM lista_chequeo
	WHERE id_lista = _id_lista ;
END $$

/*---ver lista_chequeo------------------------------------------*/

DROP PROCEDURE IF EXISTS ver_lista_chequeo $$
CREATE PROCEDURE ver_lista_chequeo (
	IN _id_lista INT )
BEGIN
	SELECT id_lista ,
	nombre_lista ,
	descripcion_lista ,
	fecha_lista ,
	tipo_lista ,
	id_autor_lista ,
        activo_lista 
	FROM lista_chequeo
	WHERE id_lista = _id_lista ;
END $$

DELIMITER ;


/*==============================================================*/
/* SP PRODUCTO                                                  */
/*==============================================================*/

DELIMITER $$

/*---insertar producto------------------------------------------*/

DROP PROCEDURE IF EXISTS insertar_producto $$
CREATE PROCEDURE insertar_producto (
	IN _id_producto INT ,
	IN _nombre_producto VARCHAR(100) ,
	IN _descripcion_producto VARCHAR(255) ,
	IN _palabras_clave_producto VARCHAR(200) ,
	IN _id_tipo_objeto_aprendizaje_producto INT )
BEGIN
	INSERT INTO producto
	VALUES (
		_id_producto ,
		_nombre_producto ,
		_descripcion_producto ,
		_palabras_clave_producto ,
		_id_tipo_objeto_aprendizaje_producto );
END $$

/*---editar producto--------------------------------------------*/

DROP PROCEDURE IF EXISTS editar_producto $$
CREATE PROCEDURE editar_producto (
	IN _id_producto INT ,
	IN _nombre_producto VARCHAR(100) ,
	IN _descripcion_producto VARCHAR(255) ,
	IN _palabras_clave_producto VARCHAR(200) ,
	IN _id_tipo_objeto_aprendizaje_producto INT )
BEGIN
	UPDATE producto
	SET nombre_producto = _nombre_producto ,
		descripcion_producto = _descripcion_producto ,
		palabras_clave_producto = _palabras_clave_producto ,
		id_tipo_objeto_aprendizaje_producto = _id_tipo_objeto_aprendizaje_producto 
	WHERE id_producto = _id_producto ;
END $$

/*---eliminar producto------------------------------------------*/

DROP PROCEDURE IF EXISTS eliminar_producto $$
CREATE PROCEDURE eliminar_producto (
	IN _id_producto INT )
BEGIN
	DELETE FROM producto
	WHERE id_producto = _id_producto ;
END $$

/*---ver producto-----------------------------------------------*/

DROP PROCEDURE IF EXISTS ver_producto $$
CREATE PROCEDURE ver_producto (
	IN _id_producto INT  )
BEGIN
	SELECT id_producto ,
	nombre_producto ,
	descripcion_producto ,
	palabras_clave_producto ,
	id_tipo_objeto_aprendizaje_producto
	FROM producto
	WHERE id_producto = _id_producto ;
END $$

DELIMITER ;

/*==============================================================*/
/* SP PROGRAMA                                                  */
/*==============================================================*/

DELIMITER $$

/*---insertar programa------------------------------------------*/

DROP PROCEDURE IF EXISTS insertar_programa $$
CREATE PROCEDURE insertar_programa (
	IN _id_programa INT ,
	IN _nombre_programa VARCHAR(50) ,
	IN _id_area_programa INT )
BEGIN
	INSERT INTO programa
	VALUES (
		_id_programa ,
		_nombre_programa ,
		_id_area_programa );
END $$

/*---editar programa--------------------------------------------*/

DROP PROCEDURE IF EXISTS editar_programa $$
CREATE PROCEDURE editar_programa (
	IN _id_programa INT ,
	IN _nombre_programa VARCHAR(50) ,
	IN _id_area_programa INT )
BEGIN
	UPDATE programa
	SET nombre_programa = _nombre_programa ,
		id_area_programa = _id_area_programa 
	WHERE id_programa = _id_programa ;
END $$

/*---eliminar programa------------------------------------------*/

DROP PROCEDURE IF EXISTS eliminar_programa $$
CREATE PROCEDURE eliminar_programa (
	IN _id_programa INT )
BEGIN
	DELETE FROM programa
	WHERE id_programa = _id_programa ;
END $$

/*---ver programa-----------------------------------------------*/

DROP PROCEDURE IF EXISTS ver_programa $$
CREATE PROCEDURE ver_programa (
	IN _id_programa INT )
BEGIN
	SELECT id_programa ,
	nombre_programa ,
	id_area_programa
	FROM programa
	WHERE id_programa = _id_programa ;
END $$

DELIMITER ;

/*==============================================================*/
/* SP PROGRAMA_PRODUCTO                                         */
/*==============================================================*/

DELIMITER $$

/*---insertar programa_producto---------------------------------*/

DROP PROCEDURE IF EXISTS insertar_programa_producto $$
CREATE PROCEDURE insertar_programa_producto (
	IN _id_producto_prog_prod INT ,
	IN _id_programa_prog_prod INT )
BEGIN
	INSERT INTO programa_producto
	VALUES (
		_id_producto_prog_prod ,
		_id_programa_prog_prod );
END $$

/*---editar programa_producto-----------------------------------*/

DROP PROCEDURE IF EXISTS editar_programa_producto $$
CREATE PROCEDURE editar_programa_producto (
	IN _id_producto_prog_prod INT ,
	IN _id_programa_prog_prod INT ,
	IN _id_nuevo_producto_prog_prod INT ,
	IN _id_nuevo_programa_prog_prod INT )
BEGIN
	UPDATE programa_producto
	SET id_producto_prog_prod = _id_nuevo_producto_prog_prod ,
		id_programa_prog_prod = _id_nuevo_programa_prog_prod 
	WHERE id_producto_prog_prod = _id_producto_prog_prod AND
		id_programa_prog_prod = _id_programa_prog_prod ;
END $$

/*---eliminar programa_producto---------------------------------*/

DROP PROCEDURE IF EXISTS eliminar_programa_producto $$
CREATE PROCEDURE eliminar_programa_producto (
	IN _id_producto_prog_prod INT ,
	IN _id_programa_prog_prod INT )
BEGIN
	DELETE FROM programa_producto
	WHERE id_producto_prog_prod = _id_producto_prog_prod AND
		id_programa_prog_prod = _id_programa_prog_prod ;
END $$

/*---ver programa_producto--------------------------------------*/

DROP PROCEDURE IF EXISTS ver_programa_producto $$
CREATE PROCEDURE ver_programa_producto (
	IN _id_producto_prog_prod INT ,
	IN _id_programa_prog_prod INT )
BEGIN
	SELECT id_producto_prog_prod ,
	id_programa_prog_prod
	FROM programa_producto
	WHERE id_producto_prog_prod = _id_producto_prog_prod AND
		id_programa_prog_prod = _id_programa_prog_prod ;
END $$

DELIMITER ;

/*==============================================================*/
/* SP REGIONAL                                                  */
/*==============================================================*/

DELIMITER $$

/*---insertar regional------------------------------------------*/

DROP PROCEDURE IF EXISTS insertar_regional $$
CREATE PROCEDURE insertar_regional (
	IN _id_regional NVARCHAR(10) ,
	IN _nombre_regional VARCHAR(50) )
BEGIN
	INSERT INTO regional
	VALUES (
		_id_regional ,
		_nombre_regional );
END $$

/*---editar regional--------------------------------------------*/

DROP PROCEDURE IF EXISTS editar_regional $$
CREATE PROCEDURE editar_regional (
	IN _id_regional NVARCHAR(10) ,
	IN _nombre_regional VARCHAR(50) )
BEGIN
	UPDATE regional
	SET nombre_regional = _nombre_regional 
	WHERE id_regional = _id_regional ;
END $$

/*---eliminar regional------------------------------------------*/

DROP PROCEDURE IF EXISTS eliminar_regional $$
CREATE PROCEDURE eliminar_regional (
	IN _id_regional NVARCHAR(10) )
BEGIN
	DELETE FROM regional
	WHERE id_regional = _id_regional ;
END $$

/*---ver regional-----------------------------------------------*/

DROP PROCEDURE IF EXISTS ver_regional $$
CREATE PROCEDURE ver_regional (
	IN _id_regional NVARCHAR(10) )
BEGIN
	SELECT id_regional ,
	nombre_regional
	FROM regional
	WHERE id_regional = _id_regional ;
END $$

DELIMITER ;

/*==============================================================*/
/* SP ROL                                                       */
/*==============================================================*/

DELIMITER $$

/*---insertar rol-----------------------------------------------*/

DROP PROCEDURE IF EXISTS insertar_rol $$
CREATE PROCEDURE insertar_rol (
	IN _id_rol INT ,
	IN _nombre_rol VARCHAR(45) )
BEGIN
	INSERT INTO rol
	VALUES (
		_id_rol ,
		_nombre_rol );
END $$

/*---editar rol-------------------------------------------------*/

DROP PROCEDURE IF EXISTS editar_rol $$
CREATE PROCEDURE editar_rol (
	IN _id_rol INT ,
	IN _nombre_rol VARCHAR(45) )
BEGIN
	UPDATE rol
	SET nombre_rol = _nombre_rol 
	WHERE id_rol = _id_rol ;
END $$

/*---eliminar rol-----------------------------------------------*/

DROP PROCEDURE IF EXISTS eliminar_rol $$
CREATE PROCEDURE eliminar_rol (
	IN _id_rol INT )
BEGIN
	DELETE FROM rol
	WHERE id_rol = _id_rol ;
END $$

/*---ver rol----------------------------------------------------*/

DROP PROCEDURE IF EXISTS ver_rol $$
CREATE PROCEDURE ver_rol (
	IN _id_rol INT )
BEGIN
	SELECT id_rol ,
	nombre_rol 
	FROM rol
	WHERE id_rol = _id_rol ;
END $$

DELIMITER ;

/*==============================================================*/
/* SP TIPO_ARCHIVO                                              */
/*==============================================================*/
DELIMITER $$

/*---insertar tipo_archivo--------------------------------------*/

DROP PROCEDURE IF EXISTS insertar_tipo_archivo $$
CREATE PROCEDURE insertar_tipo_archivo (
	IN _id_tipo_archivo INT , 
	IN _extencion_tipo_archivo VARCHAR(7) ) 
BEGIN
	INSERT INTO tipo_archivo 
	VALUES (
		_id_tipo_archivo , 
		_extencion_tipo_archivo );
END $$

/*---editar tipo_archivo----------------------------------------*/

DROP PROCEDURE IF EXISTS editar_tipo_archivo $$
CREATE PROCEDURE editar_tipo_archivo (
	IN _id_tipo_archivo INT , 
	IN _extencion_tipo_archivo VARCHAR(7) ) 
BEGIN
	UPDATE tipo_archivo 
	SET extencion_tipo_archivo = _extencion_tipo_archivo
	WHERE id_tipo_archivo = _id_tipo_archivo ;
END $$

/*---eliminar tipo_archivo--------------------------------------*/

DROP PROCEDURE IF EXISTS eliminar_tipo_archivo $$
CREATE PROCEDURE eliminar_tipo_archivo (
	IN _id_tipo_archivo INT )
BEGIN
	DELETE FROM tipo_archivo
	WHERE id_tipo_archivo = _id_tipo_archivo ;
END $$

/*---ver tipo_archivo-------------------------------------------*/

DROP PROCEDURE IF EXISTS ver_tipo_archivo $$
CREATE PROCEDURE ver_tipo_archivo (
	IN _id_tipo_archivo INT ) 
BEGIN
	SELECT id_tipo_archivo , 
	extencion_tipo_archivo 
	FROM tipo_archivo
	WHERE id_tipo_archivo = _id_tipo_archivo ;
END $$

DELIMITER ;

/*==============================================================*/
/* SP TIPO_OBJETO_APRENDIZAJE                                   */
/*==============================================================*/
DELIMITER $$

/*---insertar tipo_objeto_aprendizaje---------------------------*/

DROP PROCEDURE IF EXISTS insertar_tipo_objeto_aprendizaje $$
CREATE PROCEDURE insertar_tipo_objeto_aprendizaje (
	IN _id_tipo_objeto_aprendizaje INT , 
	IN _nombre_tipo_obj_apren VARCHAR(20) ) 
BEGIN
	INSERT INTO tipo_objeto_aprendizaje
	VALUES (
		_id_tipo_objeto_aprendizaje , 
		_nombre_tipo_obj_apren );
END $$

/*---editar tipo_objeto_aprendizaje-----------------------------*/

DROP PROCEDURE IF EXISTS editar_tipo_objeto_aprendizaje $$
CREATE PROCEDURE editar_tipo_objeto_aprendizaje (
	IN _id_tipo_objeto_aprendizaje INT , 
	IN _nombre_tipo_obj_apren VARCHAR(20) )  
BEGIN
	UPDATE tipo_objeto_aprendizaje
	SET nombre_tipo_obj_apren = _nombre_tipo_obj_apren 
	WHERE id_tipo_objeto_aprendizaje = _id_tipo_objeto_aprendizaje ;
END $$

/*---eliminar tipo_objeto_aprendizaje---------------------------*/

DROP PROCEDURE IF EXISTS eliminar_tipo_objeto_aprendizaje $$
CREATE PROCEDURE eliminar_tipo_objeto_aprendizaje (
	IN _id_tipo_objeto_aprendizaje INT )
BEGIN
	DELETE FROM tipo_objeto_aprendizaje
	WHERE id_tipo_objeto_aprendizaje = _id_tipo_objeto_aprendizaje ;
END $$

/*---ver tipo_objeto_aprendizaje--------------------------------*/

DROP PROCEDURE IF EXISTS ver_tipo_objeto_aprendizaje $$
CREATE PROCEDURE ver_tipo_objeto_aprendizaje (
	IN _id_tipo_objeto_aprendizaje INT ) 
BEGIN
	SELECT id_tipo_objeto_aprendizaje , 
	nombre_tipo_obj_apren
	FROM tipo_objeto_aprendizaje
	WHERE id_tipo_objeto_aprendizaje = _id_tipo_objeto_aprendizaje ;
END $$

DELIMITER ;

/*==============================================================*/
/* SP VERSION                                                   */
/*==============================================================*/
DELIMITER $$

/*---insertar version-------------------------------------------*/

DROP PROCEDURE IF EXISTS insertar_version $$
CREATE PROCEDURE insertar_version (
	IN _id_version INT , 
	IN _numero_version INT , 
	IN _url_version VARCHAR(500) , 
	IN _notificacion_version BOOLEAN , 
	IN _fecha_version DATE , 
	IN _fecha_caducidad_version DATE , 
	IN _fecha_aprobacion_version DATE , 
	IN _id_estado_version INT , 
	IN _id_tipo_archivo_version INT , 
	IN _id_producto_version INT , 
	IN _id_centro_version VARCHAR(10) )
BEGIN
	INSERT INTO version
	VALUES (
		_id_version , 
		_numero_version ,
                _url_version ,
                _notificacion_version ,
                _fecha_version ,
                _fecha_caducidad_version ,
                _fecha_aprobacion_version ,
                _id_estado_version ,
                _id_tipo_archivo_version ,
                _id_producto_version ,
                _id_centro_version);
END $$

/*---editar version---------------------------------------------*/

DROP PROCEDURE IF EXISTS editar_version $$
CREATE PROCEDURE editar_version (
	IN _id_version INT , 
	IN _numero_version INT , 
	IN _url_version VARCHAR(500) , 
	IN _notificacion_version BOOLEAN , 
	IN _fecha_version DATE , 
	IN _fecha_caducidad_version DATE , 
	IN _fecha_aprobacion_version DATE , 
	IN _id_estado_version INT , 
	IN _id_tipo_archivo_version INT , 
	IN _id_producto_version INT , 
	IN _id_centro_version VARCHAR(10) )
BEGIN
	UPDATE version
	SET numero_version = _numero_version ,
		url_version = _url_version ,
		notificacion_version = _notificacion_version ,
		fecha_version = _fecha_version ,
		fecha_caducidad_version = _fecha_caducidad_version ,
                fecha_aprobacion_version = _fecha_aprobacion_version ,
		id_estado_version = _id_estado_version ,
		id_tipo_archivo_version = _id_tipo_archivo_version ,
		id_producto_version = _id_producto_version ,
                id_centro_version = _id_centro_version
	WHERE id_version = _id_version ;
END $$

/*---eliminar version-------------------------------------------*/

DROP PROCEDURE IF EXISTS eliminar_version $$
CREATE PROCEDURE eliminar_version (
	IN _id_version INT )
BEGIN
	DELETE FROM version
	WHERE id_version = _id_version ;
END $$

/*---ver version------------------------------------------------*/

DROP PROCEDURE IF EXISTS ver_version $$
CREATE PROCEDURE ver_version (
	IN _id_version INT ) 
BEGIN
	SELECT id_version , 
	numero_version ,
        url_version ,
        notificacion_version ,
        fecha_version ,
        fecha_caducidad_version ,
        fecha_aprobacion_version ,
        id_estado_version ,
        id_tipo_archivo_version ,
        id_producto_version ,
        id_centro_version
	FROM version
	WHERE id_version = _id_version ;
END $$

DELIMITER ;

/*==============================================================*/
/* SP VISITA                                                    */
/*==============================================================*/
DELIMITER $$

/*---insertar visita--------------------------------------------*/

DROP PROCEDURE IF EXISTS insertar_visita $$
CREATE PROCEDURE insertar_visita (
	IN _fecha_visita DATE ,
	IN _id_producto_visita INT ,
	IN _id_funcionario_visita INT ) 
BEGIN
	INSERT INTO visita
	VALUES (
		_fecha_visita , 
		_id_producto_visita ,
		_id_funcionario_visita );
END $$

/*---editar visita----------------------------------------------*/

DROP PROCEDURE IF EXISTS editar_visita $$
CREATE PROCEDURE editar_visita (
	IN _fecha_visita DATE ,
	IN _id_producto_visita INT ,
	IN _id_funcionario_visita INT ,
	IN _fecha_nuevo_visita DATE ,
	IN _id_nuevo_producto_visita INT ,
	IN _id_nuevo_funcionario_visita INT )  
BEGIN
	UPDATE visita
	SET fecha_visita = _fecha_nuevo_visita ,
		id_producto_visita = _id_nuevo_producto_visita ,
		id_funcionario_visita = _id_nuevo_funcionario_visita  
	WHERE fecha_visita = _fecha_visita AND
		id_producto_visita = _id_producto_visita AND
		id_funcionario_visita = _id_funcionario_visita ;
END $$

/*---eliminar visita--------------------------------------------*/

DROP PROCEDURE IF EXISTS eliminar_visita $$
CREATE PROCEDURE eliminar_visita (
	IN _fecha_visita DATE ,
	IN _id_producto_visita INT ,
	IN _id_funcionario_visita INT ) 
BEGIN
	DELETE FROM visita
	WHERE fecha_visita = _fecha_visita AND
		id_producto_visita = _id_producto_visita AND
		id_funcionario_visita = _id_funcionario_visita ;
END $$

/*---ver visita-------------------------------------------------*/

DROP PROCEDURE IF EXISTS ver_visita $$
CREATE PROCEDURE ver_visita (
	IN _fecha_visita DATE ,
	IN _id_producto_visita INT ,
	IN _id_funcionario_visita INT )
BEGIN
	SELECT fecha_visita , 
	id_producto_visita ,
	id_funcionario_visita
	FROM visita
	WHERE fecha_visita = _fecha_visita AND
		id_producto_visita = _id_producto_visita AND
		id_funcionario_visita = _id_funcionario_visita ;
END $$

DELIMITER ;

/*==============================================================*/
/* SP VER_PRODUCTOS_APROVADOS                                   */
/*==============================================================*/

DELIMITER $$

DROP PROCEDURE IF EXISTS ver_productos_aprovados $$
CREATE PROCEDURE ver_productos_aprovados (
    )
BEGIN
    SELECT 
        nombre_producto ,
        numero_version ,
        descripcion_producto ,
        fecha_version ,
        nombre_tipo_obj_apren,
        extencion_tipo_archivo
    FROM producto
    INNER JOIN version
    ON id_producto = id_producto_version
    INNER JOIN tipo_archivo
    ON id_tipo_archivo = id_tipo_archivo_version
    INNER JOIN tipo_objeto_aprendizaje
    ON id_tipo_objeto_aprendizaje = id_tipo_objeto_aprendizaje_producto 
    WHERE id_estado_version = 1;
END $$

DELIMITER ;

/*==============================================================*/
/* SP ENVIAR_NUEVO_PRODUCTO                                     */
/*==============================================================*/

DELIMITER $$

DROP PROCEDURE IF EXISTS enviar_nuevo_producto $$
CREATE PROCEDURE enviar_nuevo_producto (
    IN _nombre_producto VARCHAR(100),
    IN _descripcion_producto VARCHAR(255),
    IN _palabras_clave_producto VARCHAR(200),
    IN _id_tipo_objeto_aprendizaje_producto INT ,
    IN _url_version VARCHAR(500),
    IN _id_tipo_archivo_version INT ,
    IN _id_centro_version VARCHAR(10)
    )
BEGIN
    DECLARE _fecha DATE;
    DECLARE _id_producto INT ;
    DECLARE _id_version INT ;
    SET _fecha = CURDATE();
    SET _id_producto = (SELECT MAX(id_producto) FROM producto) + 1;
    SET _id_producto = IFNULL(_id_producto, 1);
    CALL insertar_producto(
        _id_producto ,
        _nombre_producto ,
        _descripcion_producto ,
        _palabras_clave_producto,
        _id_tipo_objeto_aprendizaje_producto);
    SET _id_version = (SELECT MAX(id_version) FROM version) + 1;
    SET _id_version = IFNULL(_id_version, 1);
    CALL insertar_version(
        _id_version ,
        1 ,
        _url_version ,
        0 ,
        _fecha ,
        NULL ,
        NULL ,
        3 ,
        _id_tipo_archivo_version ,
        _id_producto ,
        _id_centro_version);
END $$

DELIMITER ;

/*==============================================================*/
/* SP VER_INSTRUCTORES_CENTRO                                   */
/*==============================================================*/

DELIMITER $$

DROP PROCEDURE IF EXISTS ver_instructores_centro $$
CREATE PROCEDURE ver_instructores_centro (
        IN _id_centro VARCHAR(10)
    )
BEGIN
    SELECT 
        documento_funcionario,
        nombre_funcionario,
        apellido_funcionario,
        correo_funcionario,
        cargo_funcionario,
        telefono_funcionario
    FROM funcionario
    WHERE id_centro_funcionario = _id_centro;
END $$

DELIMITER ;

/*==============================================================*/
/* SP REGISTRAR_INSTRUCTOR_CENTRO                               */
/*==============================================================*/

DELIMITER $$

DROP PROCEDURE IF EXISTS registrar_instructor_centro $$
CREATE PROCEDURE registrar_instructor_centro (
        IN _documento_funcionario VARCHAR(8) ,
        IN _correo_funcionario VARCHAR(100) ,
        IN _contrasena_funcionario VARCHAR(255) ,
        IN _nombre_funcionario VARCHAR(70) ,
        IN _apellido_funcionario VARCHAR(70) ,
        IN _cargo_funcionario VARCHAR(45) ,
        IN _telefono_funcionario VARCHAR(10) ,
        IN _id_centro VARCHAR(10)
    )
BEGIN
    DECLARE _id_funcionario INT ;
    SET _id_funcionario = (SELECT MAX(id_funcionario) FROM funcionario) + 1;
    SET _id_funcionario = IFNULL(_id_funcionario, 1);
    CALL insertar_funcionario(
        _id_funcionario ,
        _documento_funcionario ,
        _correo_funcionario ,
        _contrasena_funcionario ,
        _nombre_funcionario ,
        _apellido_funcionario ,
        _cargo_funcionario ,
        _telefono_funcionario ,
        _id_centro);
END $$

DELIMITER ;

/*==============================================================*/
/* SP NUEVA_LISTA                                               */
/*==============================================================*/

DELIMITER $$

DROP PROCEDURE IF EXISTS nueva_lista $$
CREATE PROCEDURE nueva_lista (
        IN _nombre_lista VARCHAR(100) ,
        IN _descripcion_lista VARCHAR(255) ,
        IN _tipo_lista VARCHAR(20) ,
        IN _id_autor_lista INT 
    )
BEGIN
    DECLARE _fecha_lista DATE ;
    DECLARE _id_lista INT ;
    SET _fecha_lista = CURDATE() ;
    SET _id_lista = (SELECT MAX(id_lista) FROM lista_chequeo) + 1;
    SET _id_lista = IFNULL(_id_lista, 1);
    CALL insertar_lista_chequeo(
        _id_lista ,
        _nombre_lista ,
        _descripcion_lista ,
        _fecha_lista ,
        _tipo_lista ,
        _id_autor_lista ,
        1);
END $$

DELIMITER ;

/*==============================================================*/
/* SP NUEVO_ITEM                                                */
/*==============================================================*/

DELIMITER $$

DROP PROCEDURE IF EXISTS nuevo_item $$
CREATE PROCEDURE nuevo_item (
        IN _descriptor_item VARCHAR(200),
        IN _id_autor_item INT 
    )
BEGIN
    DECLARE _id_item INT ;
    SET _id_item = (SELECT MAX(id_item) FROM item) + 1;
    SET _id_item = IFNULL(_id_item, 1);
    CALL insertar_item(
        _id_item ,
        _descriptor_item ,
        _id_autor_item );
END $$

DELIMITER ;

/*==============================================================*/
/* SP NUEVA_AREA                                                */
/*==============================================================*/

DELIMITER $$

DROP PROCEDURE IF EXISTS nueva_area $$
CREATE PROCEDURE nueva_area (
        IN _nombre_area VARCHAR(100),
        IN _id_centro_area VARCHAR(10)
    )
BEGIN
    DECLARE _id_area INT ;
    SET _id_area = (SELECT MAX(id_area) FROM area) + 1;
    SET _id_area = IFNULL(_id_area, 1);
    CALL insertar_area(
        _id_area ,
        _nombre_area ,
        _id_centro_area);
END $$

DELIMITER ;

/*==============================================================*/
/* SP NUEVA_CATEGORIA                                           */
/*==============================================================*/

DELIMITER $$

DROP PROCEDURE IF EXISTS nueva_categoria $$
CREATE PROCEDURE nueva_categoria (
        IN _nombre_categoria VARCHAR(50),
        IN _id_centro_categoria VARCHAR(10)
    )
BEGIN
    DECLARE _id_categoria INT ;
    SET _id_categoria = (SELECT MAX(id_categoria) FROM categoria) + 1;
    SET _id_categoria = IFNULL(_id_categoria, 1);
    CALL insertar_categoria(
        _id_categoria ,
        _nombre_categoria ,
        _id_centro_categoria);
END $$

DELIMITER ;

/*==============================================================*/
/* SP NUEVO_COMENTARIO                                          */
/*==============================================================*/

DELIMITER $$

DROP PROCEDURE IF EXISTS nuevo_comentario $$
CREATE PROCEDURE nuevo_comentario (
        IN _valoracion_comentario VARCHAR(50) ,
        IN _puntuacion_comentario INT ,
        IN _id_producto_comentario INT ,
        IN _id_funcionario_comentario INT 
    )
BEGIN
    DECLARE _id_comentario INT ;
    DECLARE _fecha_comentario DATE;
    SET _fecha_comentario = CURDATE();
    SET _id_comentario = (SELECT MAX(id_comentario) FROM comentario) + 1;
    SET _id_comentario = IFNULL(_id_comentario, 1);
    CALL insertar_comentario(
        _id_comentario ,
        _valoracion_comentario ,
        _puntuacion_comentario ,
        _fecha_comentario ,
        _id_producto_comentario ,
        _id_funcionario_comentario);
END $$

DELIMITER ;

/*==============================================================*/
/* SP NUEVO_DETALLE_LISTA                                       */
/*==============================================================*/

DELIMITER $$

DROP PROCEDURE IF EXISTS nuevo_detalle_lista $$
CREATE PROCEDURE nuevo_detalle_lista (
        IN _id_lista_detalle_lista INT ,
        IN _id_item_detalle_lista INT  
    )
BEGIN
    DECLARE _id_detalle_lista INT ;
    SET _id_detalle_lista = (SELECT MAX(id_detalle_lista) FROM detalle_lista) + 1;
    SET _id_detalle_lista = IFNULL(_id_detalle_lista, 1);
    CALL insertar_detalle_lista(
        _id_detalle_lista ,
        _id_lista_detalle_lista ,
        _id_item_detalle_lista );
END $$

DELIMITER ;

/*==============================================================*/
/* SP NUEVA_EVALUACION_ITEM                                     */
/*==============================================================*/

DELIMITER $$

DROP PROCEDURE IF EXISTS nueva_evaluacion_item $$
CREATE PROCEDURE nueva_evaluacion_item (
        IN _id_eval_version_eval_detalle_lista INT ,
        IN _id_detalle_lista_eval_detalle_lista INT  
    )
BEGIN
    DECLARE _id_eval_detalle_lista INT ;
    SET _id_eval_detalle_lista = (SELECT MAX(id_eval_detalle_lista) FROM eval_detalle_lista) + 1;
    SET _id_eval_detalle_lista = IFNULL(_id_eval_detalle_lista, 1);
    CALL insertar_eval_detalle_lista (
        _id_eval_detalle_lista ,
        NULL ,
        NULL ,
        _id_eval_version_eval_detalle_lista ,
        _id_detalle_lista_eval_detalle_lista);
END $$

DELIMITER ;

/*==============================================================*/
/* SP NUEVA_EVALUACION_LISTA                                    */
/*==============================================================*/

DELIMITER $$

DROP PROCEDURE IF EXISTS nueva_evaluacion_lista $$
CREATE PROCEDURE nueva_evaluacion_lista (
        IN _id_version_eval_version_general INT ,
        IN _id_lista_eval_version_general INT ,
        IN _id_evaluador_eval_version_general INT  
    )
BEGIN
    DECLARE _id_eval_version_general INT ;
    SET _id_eval_version_general = (SELECT MAX(id_eval_version_general) FROM eval_version_general) + 1;
    SET _id_eval_version_general = IFNULL(_id_eval_version_general, 1);
    CALL insertar_eval_version_general (
        _id_eval_version_general ,
        _id_version_eval_version_general ,
        _id_lista_eval_version_general ,
        NULL ,
        NULL ,
        NULL ,
        _id_evaluador_eval_version_general );
END $$

DELIMITER ;

/*==============================================================*/
/* SP NUEVO_PROGRAMA                                            */
/*==============================================================*/

DELIMITER $$

DROP PROCEDURE IF EXISTS nuevo_programa $$
CREATE PROCEDURE nuevo_programa (
        IN _nombre_programa VARCHAR(50) ,
        IN _id_area_programa INT 
    )
BEGIN
    DECLARE _id_programa INT ;
    SET _id_programa = (SELECT MAX(id_programa) FROM programa) + 1;
    SET _id_programa = IFNULL(_id_programa, 1);
    CALL insertar_programa (
        _id_programa ,
        _nombre_programa ,
        _id_area_programa );
END $$

DELIMITER ;

/*==============================================================*/
/* SP NUEVA_VISITA                                              */
/*==============================================================*/

DELIMITER $$

DROP PROCEDURE IF EXISTS nueva_visita $$
CREATE PROCEDURE nueva_visita (
        IN _id_producto_visita INT ,
        IN _id_funcionario_visita INT 
    )
BEGIN
    DECLARE _fecha_visita DATE ;
    SET _fecha_visita = CURDATE();
    CALL insertar_visita (
        _fecha_visita ,
        _id_producto_visita ,
        _id_funcionario_visita );
END $$

DELIMITER ;

/*==============================================================*/
/* SP ACTUALIZAR_PRODUCTO                                       */
/*==============================================================*/

DELIMITER $$

DROP PROCEDURE IF EXISTS actualizar_producto $$
CREATE PROCEDURE actualizar_producto (
        IN _id_producto_version INT ,
        IN _url_version VARCHAR(500),
        IN _id_tipo_archivo_version INT ,
        IN _id_centro_version VARCHAR(10)
    )
BEGIN
    DECLARE _fecha DATE;
    DECLARE _id_version INT ;
    DECLARE _numero_version INT ;
    SET _fecha = CURDATE();
    SET _id_version = (SELECT MAX(id_version) FROM version) + 1;
    SET _numero_version = (SELECT MAX(numero_version) FROM version WHERE id_producto_version = _id_producto_version ) + 1;
    CALL insertar_version(
        _id_version ,
        _numero_version ,
        _url_version ,
        0 ,
        _fecha ,
        NULL ,
        NULL ,
        3 ,
        _id_tipo_archivo_version ,
        _id_producto_version ,
        _id_centro_version);
END $$

DELIMITER ;

/*==============================================================*/
/* SP LOGIN                                                     */
/*==============================================================*/

DELIMITER $$

DROP PROCEDURE IF EXISTS login $$
CREATE PROCEDURE login (
        IN _correo_funcionario VARCHAR(100) ,
        IN _contrasena_funcionario VARCHAR(255) 
    )
BEGIN
    SELECT id_funcionario, 
        documento_funcionario,
        correo_funcionario,
        nombre_funcionario,
        apellido_funcionario,
        cargo_funcionario,
        telefono_funcionario,
        id_centro_funcionario
    FROM funcionario
    WHERE correo_funcionario = _correo_funcionario AND contrasena_funcionario = _contrasena_funcionario ;
END $$

DELIMITER ;