-- -----------------------------------------------------
-- DBMS name:      MariaDB 10
-- Created on:     11/08/2016 11:00:00
-- -----------------------------------------------------

-- -----------------------------------------------------
-- PROCEDIMIENTOS ALMACENADOS
-- -----------------------------------------------------
-- INSERTAR_(nombre de la tabla)
-- EDITAR_(nombre de la tabla)(exp: autor, programa_producto, categoria_producto, funcionario_rol)
-- ELIMINAR_(nombre de la tabla)
-- VER_(nombre de la tabla)
-- -----------------------------------------------------
-- VER_FUNCIONARIOS_CENTRO
-- REGISTRAR_FUNCIONARIO
-- INGRESO
-- VER_TODOS_TIPO_DOCUMENTO
-- VER_ROLES_FUNCIONARIO
-- CONTEO_FUNCIONARIOS_CENTRO
-- INHABILITAR_FUNCIONARIO
-- CAMBIO_CONTRASENA
-- VER_FUNCIONARIO_CORREO
-- VER_FUNCIONARIO_DOCUMENTO
-- VER_FUNCIONARIO_ACTIVO
-- -----------------------------------------------------

-- -----------------------------------------------------
-- DATABASE name:        MunninProject
-- -----------------------------------------------------

DROP DATABASE IF EXISTS munninProject;
CREATE DATABASE munninProject;
ALTER DATABASE munninProject DEFAULT CHARACTER SET utf8 COLLATE utf8_bin;
USE munninProject;

-- -----------------------------------------------------
-- Table regional
-- -----------------------------------------------------
CREATE TABLE regional (
  id_regional VARCHAR(10) NOT NULL,
  nombre_regional VARCHAR(70) NOT NULL,
  PRIMARY KEY (id_regional))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table ciudad
-- -----------------------------------------------------
CREATE TABLE ciudad (
  id_ciudad VARCHAR(10) NOT NULL,
  nombre_ciudad VARCHAR(45) NOT NULL,
  PRIMARY KEY (id_ciudad))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table centro
-- -----------------------------------------------------
CREATE TABLE centro (
  id_centro VARCHAR(10) NOT NULL,
  nombre_centro VARCHAR(200) NOT NULL,
  id_regional_centro VARCHAR(10) NOT NULL,
  id_ciudad_centro VARCHAR(10) NOT NULL,
  PRIMARY KEY (id_centro),
  INDEX id_regional_centro (id_regional_centro ASC),
  INDEX id_ciudad_centro (id_ciudad_centro ASC),
  CONSTRAINT centro_ibfk_1
    FOREIGN KEY (id_regional_centro)
    REFERENCES regional (id_regional),
  CONSTRAINT centro_ibfk_2
    FOREIGN KEY (id_ciudad_centro)
    REFERENCES ciudad (id_ciudad))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table area
-- -----------------------------------------------------
CREATE TABLE area (
  id_area INT(11) NOT NULL AUTO_INCREMENT,
  nombre_area VARCHAR(100) NOT NULL,
  activo_area BIT(1) NOT NULL,
  id_centro_area VARCHAR(10) NOT NULL,
  PRIMARY KEY (id_area),
  INDEX id_centro_area (id_centro_area ASC),
  CONSTRAINT area_ibfk_1
    FOREIGN KEY (id_centro_area)
    REFERENCES centro (id_centro))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table tipo_documento
-- -----------------------------------------------------
CREATE TABLE tipo_documento (
  id_tipo_documento INT(11) NOT NULL AUTO_INCREMENT,
  nombre_tipo_documento VARCHAR(30) NOT NULL,
  PRIMARY KEY (id_tipo_documento))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table funcionario
-- -----------------------------------------------------
CREATE TABLE funcionario (
  id_funcionario INT(11) NOT NULL AUTO_INCREMENT,
  activo_funcionario BIT(1) NOT NULL,
  id_tipo_documento_funcionario INT(11) NOT NULL,
  documento_funcionario VARCHAR(12) NOT NULL,
  correo_funcionario VARCHAR(100) NOT NULL,
  contrasena_funcionario VARCHAR(255) NOT NULL,
  nombre_funcionario VARCHAR(70) NOT NULL,
  apellido_funcionario VARCHAR(70) NOT NULL,
  telefono_funcionario VARCHAR(10) NULL DEFAULT NULL,
  id_centro_funcionario VARCHAR(10) NOT NULL,
  PRIMARY KEY (id_funcionario),
  UNIQUE INDEX correo_funcionario_UNIQUE (correo_funcionario ASC),
  UNIQUE INDEX documento_funcionario_UNIQUE (id_tipo_documento_funcionario ASC, documento_funcionario ASC),
  INDEX id_centro_funcionario (id_centro_funcionario ASC),
  CONSTRAINT funcionario_ibfk_1
    FOREIGN KEY (id_tipo_documento_funcionario)
    REFERENCES tipo_documento (id_tipo_documento),
  CONSTRAINT funcionario_ibfk_2
    FOREIGN KEY (id_centro_funcionario)
    REFERENCES centro (id_centro))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table estado
-- -----------------------------------------------------
CREATE TABLE estado (
  id_estado INT(11) NOT NULL AUTO_INCREMENT,
  nombre_estado VARCHAR(45) NOT NULL,
  PRIMARY KEY (id_estado))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table tipo_archivo
-- -----------------------------------------------------
CREATE TABLE tipo_archivo (
  id_tipo_archivo INT(11) NOT NULL AUTO_INCREMENT,
  extension_tipo_archivo VARCHAR(7) NOT NULL,
  PRIMARY KEY (id_tipo_archivo))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table tipo_objeto_aprendizaje
-- -----------------------------------------------------
CREATE TABLE tipo_objeto_aprendizaje (
  id_tipo_objeto_aprendizaje INT(11) NOT NULL AUTO_INCREMENT,
  nombre_tipo_obj_apren VARCHAR(20) NOT NULL,
  PRIMARY KEY (id_tipo_objeto_aprendizaje))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table producto
-- -----------------------------------------------------
CREATE TABLE producto (
  id_producto INT(11) NOT NULL AUTO_INCREMENT,
  nombre_producto VARCHAR(100) NOT NULL,
  descripcion_producto VARCHAR(255) CHARACTER SET 'utf8' NOT NULL,
  palabras_clave_producto VARCHAR(200) CHARACTER SET 'utf8' NOT NULL,
  id_tipo_objeto_aprendizaje_producto INT(11) NOT NULL,
  PRIMARY KEY (id_producto),
  INDEX id_tipo_objeto_aprendizaje_producto (id_tipo_objeto_aprendizaje_producto ASC),
  CONSTRAINT producto_ibfk_1
    FOREIGN KEY (id_tipo_objeto_aprendizaje_producto)
    REFERENCES tipo_objeto_aprendizaje (id_tipo_objeto_aprendizaje))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table version
-- -----------------------------------------------------
CREATE TABLE version (
  id_version INT(11) NOT NULL AUTO_INCREMENT,
  numero_version INT(11) NOT NULL,
  url_version VARCHAR(500) CHARACTER SET 'utf8' NOT NULL,
  fecha_version DATE NOT NULL,
  fecha_caducidad_version DATE NULL DEFAULT NULL,
  fecha_aprobacion_version DATE NULL DEFAULT NULL,
  id_estado_version INT(11) NOT NULL,
  id_tipo_archivo_version INT(11) NOT NULL,
  id_producto_version INT(11) NOT NULL,
  id_centro_version VARCHAR(10) NOT NULL,
  PRIMARY KEY (id_version),
  INDEX id_estado_version (id_estado_version ASC),
  INDEX id_tipo_archivo_version (id_tipo_archivo_version ASC),
  INDEX id_producto_version (id_producto_version ASC),
  INDEX id_centro_version (id_centro_version ASC),
  CONSTRAINT version_ibfk_1
    FOREIGN KEY (id_estado_version)
    REFERENCES estado (id_estado),
  CONSTRAINT version_ibfk_2
    FOREIGN KEY (id_tipo_archivo_version)
    REFERENCES tipo_archivo (id_tipo_archivo),
  CONSTRAINT version_ibfk_3
    FOREIGN KEY (id_producto_version)
    REFERENCES producto (id_producto),
  CONSTRAINT version_ibfk_4
    FOREIGN KEY (id_centro_version)
    REFERENCES centro (id_centro))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table autor
-- -----------------------------------------------------
CREATE TABLE autor (
  id_funcionario_autor INT(11) NOT NULL,
  id_version_autor INT(11) NOT NULL,
  PRIMARY KEY (id_funcionario_autor, id_version_autor),
  CONSTRAINT autor_ibfk_1
    FOREIGN KEY (id_funcionario_autor)
    REFERENCES funcionario (id_funcionario),
  CONSTRAINT autor_ibfk_2
    FOREIGN KEY (id_version_autor)
    REFERENCES version (id_version))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table categoria
-- -----------------------------------------------------
CREATE TABLE categoria (
  id_categoria INT(11) NOT NULL AUTO_INCREMENT,
  nombre_categoria VARCHAR(50) NOT NULL,
  activo_categoria BIT(1) NOT NULL,
  id_centro_categoria VARCHAR(10) NOT NULL,
  PRIMARY KEY (id_categoria),
  INDEX id_centro_categoria (id_centro_categoria ASC),
  CONSTRAINT categoria_ibfk_1
    FOREIGN KEY (id_centro_categoria)
    REFERENCES centro (id_centro))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table categoria_producto
-- -----------------------------------------------------
CREATE TABLE categoria_producto (
  id_categoria_cat_prod INT(11) NOT NULL,
  id_producto_cat_prod INT(11) NOT NULL,
  PRIMARY KEY (id_categoria_cat_prod, id_producto_cat_prod),
  CONSTRAINT categoria_producto_ibfk_1
    FOREIGN KEY (id_categoria_cat_prod)
    REFERENCES categoria (id_categoria),
  CONSTRAINT categoria_producto_ibfk_2
    FOREIGN KEY (id_producto_cat_prod)
    REFERENCES producto (id_producto))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table comentario
-- -----------------------------------------------------
CREATE TABLE comentario (
  id_comentario INT(11) NOT NULL AUTO_INCREMENT,
  valoracion_comentario VARCHAR(45) NOT NULL,
  puntuacion_comentario INT(11) NOT NULL,
  fecha_comentario DATE NOT NULL,
  id_producto_comentario INT(11) NOT NULL,
  id_funcionario_comentario INT(11) NOT NULL,
  PRIMARY KEY (id_comentario),
  INDEX id_producto_comentario (id_producto_comentario ASC),
  INDEX id_funcionario_comentario (id_funcionario_comentario ASC),
  CONSTRAINT comentario_ibfk_1
    FOREIGN KEY (id_producto_comentario)
    REFERENCES producto (id_producto),
  CONSTRAINT comentario_ibfk_2
    FOREIGN KEY (id_funcionario_comentario)
    REFERENCES funcionario (id_funcionario))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table tipo_lista
-- -----------------------------------------------------
CREATE TABLE tipo_lista (
  id_tipo_lista INT NOT NULL AUTO_INCREMENT,
  nombre_tipo_lista VARCHAR(30) NOT NULL,
  PRIMARY KEY (id_tipo_lista))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table lista
-- -----------------------------------------------------
CREATE TABLE lista (
  id_lista INT(11) NOT NULL AUTO_INCREMENT,
  nombre_lista VARCHAR(100) NOT NULL,
  descripcion_lista VARCHAR(255) NOT NULL,
  fecha_lista DATE NOT NULL,
  id_autor_lista INT(11) NOT NULL,
  activo_lista BIT(1) NOT NULL,
  id_tipo_lista_lista INT NOT NULL,
  PRIMARY KEY (id_lista),
  INDEX id_autor_lista (id_autor_lista ASC),
  INDEX fk_lista_tipo_lista1_idx (id_tipo_lista_lista ASC),
  CONSTRAINT lista_ibfk_1
    FOREIGN KEY (id_autor_lista)
    REFERENCES funcionario (id_funcionario),
  CONSTRAINT fk_lista_tipo_lista1
    FOREIGN KEY (id_tipo_lista_lista)
    REFERENCES tipo_lista (id_tipo_lista))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table evaluacion_lista
-- -----------------------------------------------------
CREATE TABLE evaluacion_lista (
  id_evaluacion_lista INT(11) NOT NULL AUTO_INCREMENT,
  id_version_evaluacion_lista INT(11) NOT NULL,
  id_lista_evaluacion_lista INT(11) NOT NULL,
  calificacion_evaluacion_lista BIT(1) NULL DEFAULT NULL,
  observaciones_evaluacion_lista VARCHAR(100) NULL DEFAULT NULL,
  fecha_evaluacion_lista DATE NULL DEFAULT NULL,
  id_evaluador_evaluacion_lista INT(11) NOT NULL,
  PRIMARY KEY (id_evaluacion_lista),
  INDEX id_version_evaluacion_lista (id_version_evaluacion_lista ASC),
  INDEX id_lista_evaluacion_lista (id_lista_evaluacion_lista ASC),
  INDEX id_evaluador_evaluacion_lista (id_evaluador_evaluacion_lista ASC),
  CONSTRAINT evaluacion_lista_ibfk_1
    FOREIGN KEY (id_version_evaluacion_lista)
    REFERENCES version (id_version),
  CONSTRAINT evaluacion_lista_ibfk_2
    FOREIGN KEY (id_lista_evaluacion_lista)
    REFERENCES lista (id_lista),
  CONSTRAINT evaluacion_lista_ibfk_3
    FOREIGN KEY (id_evaluador_evaluacion_lista)
    REFERENCES funcionario (id_funcionario))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table item
-- -----------------------------------------------------
CREATE TABLE item (
  id_item INT(11) NOT NULL AUTO_INCREMENT,
  descriptor_item VARCHAR(200) NOT NULL,
  id_autor_item INT(11) NOT NULL,
  PRIMARY KEY (id_item),
  INDEX id_autor_item (id_autor_item ASC),
  CONSTRAINT item_ibfk_1
    FOREIGN KEY (id_autor_item)
    REFERENCES funcionario (id_funcionario))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table item_lista
-- -----------------------------------------------------
CREATE TABLE item_lista (
  id_lista_item_lista INT(11) NOT NULL,
  id_item_item_lista INT(11) NOT NULL,
  PRIMARY KEY (id_lista_item_lista, id_item_item_lista),
  INDEX id_lista_item_lista (id_lista_item_lista ASC),
  INDEX id_item_item_lista (id_item_item_lista ASC),
  CONSTRAINT item_lista_ibfk_1
    FOREIGN KEY (id_lista_item_lista)
    REFERENCES lista (id_lista),
  CONSTRAINT item_lista_ibfk_2
    FOREIGN KEY (id_item_item_lista)
    REFERENCES item (id_item))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table evaluacion_item
-- -----------------------------------------------------
CREATE TABLE evaluacion_item (
  id_evaluacion_item INT(11) NOT NULL AUTO_INCREMENT,
  calificacion_evaluacion_item BIT(1) NULL DEFAULT NULL,
  observacion_evaluacion_item VARCHAR(100) NULL DEFAULT NULL,
  id_evaluacion_lista_evaluacion_item INT(11) NOT NULL,
  id_item_evaluacion_item INT(11) NOT NULL,
  PRIMARY KEY (id_evaluacion_item),
  INDEX id_evaluacion_lista_evaluacion_item (id_evaluacion_lista_evaluacion_item ASC),
  INDEX id_item_evaluacion_item (id_item_evaluacion_item ASC),
  CONSTRAINT evaluacion_item_ibfk_1
    FOREIGN KEY (id_evaluacion_lista_evaluacion_item)
    REFERENCES evaluacion_lista (id_evaluacion_lista),
  CONSTRAINT evaluacion_item_ibfk_2
    FOREIGN KEY (id_item_evaluacion_item)
    REFERENCES item (id_item))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table rol
-- -----------------------------------------------------
CREATE TABLE rol (
  id_rol INT(11) NOT NULL AUTO_INCREMENT,
  nombre_rol VARCHAR(45) NOT NULL,
  PRIMARY KEY (id_rol))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table funcionario_rol
-- -----------------------------------------------------
CREATE TABLE funcionario_rol (
  id_funcionario_funcionario_rol INT(11) NOT NULL,
  id_rol_funcionario_rol INT(11) NOT NULL,
  PRIMARY KEY (id_funcionario_funcionario_rol, id_rol_funcionario_rol),
  CONSTRAINT funcionario_rol_ibfk_1
    FOREIGN KEY (id_funcionario_funcionario_rol)
    REFERENCES funcionario (id_funcionario),
  CONSTRAINT funcionario_rol_ibfk_2
    FOREIGN KEY (id_rol_funcionario_rol)
    REFERENCES rol (id_rol))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table programa
-- -----------------------------------------------------
CREATE TABLE programa (
  id_programa INT(11) NOT NULL AUTO_INCREMENT,
  nombre_programa VARCHAR(50) NOT NULL,
  id_area_programa INT(11) NOT NULL,
  PRIMARY KEY (id_programa),
  INDEX id_area_programa (id_area_programa ASC),
  CONSTRAINT programa_ibfk_1
    FOREIGN KEY (id_area_programa)
    REFERENCES area (id_area))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table programa_producto
-- -----------------------------------------------------
CREATE TABLE programa_producto (
  id_producto_prog_prod INT(11) NOT NULL,
  id_programa_prog_prod INT(11) NOT NULL,
  PRIMARY KEY (id_producto_prog_prod, id_programa_prog_prod),
  CONSTRAINT programa_producto_ibfk_1
    FOREIGN KEY (id_producto_prog_prod)
    REFERENCES producto (id_producto),
  CONSTRAINT programa_producto_ibfk_2
    FOREIGN KEY (id_programa_prog_prod)
    REFERENCES programa (id_programa))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table visita
-- -----------------------------------------------------
CREATE TABLE visita (
  id_visita INT NOT NULL AUTO_INCREMENT,
  fecha_visita DATE NOT NULL,
  id_producto_visita INT(11) NOT NULL,
  id_funcionario_visita INT(11) NOT NULL,
  PRIMARY KEY (id_visita),
  UNIQUE INDEX visita_UNIQUE (fecha_visita ASC, id_producto_visita ASC, id_funcionario_visita ASC ),
  INDEX id_producto_visita (id_producto_visita ASC),
  INDEX id_funcionario_visita (id_funcionario_visita ASC),
  CONSTRAINT visita_ibfk_1
    FOREIGN KEY (id_producto_visita)
    REFERENCES producto (id_producto),
  CONSTRAINT visita_ibfk_2
    FOREIGN KEY (id_funcionario_visita)
    REFERENCES funcionario (id_funcionario))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table mensaje
-- -----------------------------------------------------
CREATE TABLE mensaje (
  id_mensaje INT NOT NULL AUTO_INCREMENT,
  texto_mensaje VARCHAR(100) NOT NULL,
  PRIMARY KEY (id_mensaje))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table Notificacion
-- -----------------------------------------------------
CREATE TABLE Notificacion (
  id_notificacion INT NOT NULL AUTO_INCREMENT,
  visto_notificacion BIT(1) NOT NULL,
  id_mensaje_notificacion INT NOT NULL,
  id_version_notificacion INT(11) NOT NULL,
  id_funcionario_notificacion INT NOT NULL,
  id_rol_notificacion INT NOT NULL,
  PRIMARY KEY (id_notificacion),
  INDEX fk_Notificacion_mensaje1_idx (id_mensaje_notificacion ASC),
  INDEX fk_Notificacion_version1_idx (id_version_notificacion ASC),
  INDEX fk_Notificacion_funcionario1_idx (id_funcionario_notificacion ASC),
  INDEX fk_Notificacion_rol1_idx (id_rol_notificacion ASC),
  CONSTRAINT fk_Notificacion_mensaje1
    FOREIGN KEY (id_mensaje_notificacion)
    REFERENCES mensaje (id_mensaje),
  CONSTRAINT fk_Notificacion_version1
    FOREIGN KEY (id_version_notificacion)
    REFERENCES version (id_version),
  CONSTRAINT fk_Notificacion_funcionario1
    FOREIGN KEY (id_funcionario_notificacion)
    REFERENCES funcionario (id_funcionario),
  CONSTRAINT fk_Notificacion_rol1
    FOREIGN KEY (id_rol_notificacion)
    REFERENCES rol (id_rol))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- PROCEDIMIENTOS ALMACENADOS
-- -----------------------------------------------------

-- -----------------------------------------------------
-- SP AREA
-- -----------------------------------------------------
DELIMITER $$

-- insertar area

DROP PROCEDURE IF EXISTS insertar_area $$
CREATE PROCEDURE insertar_area (
	IN _nombre_area VARCHAR(100) ,
        IN _activo_area BIT(1) ,
	IN _id_centro_area VARCHAR(10) ) 
BEGIN
        INSERT INTO area (
            nombre_area , 
            activo_area ,
            id_centro_area) 
	VALUES (
		_nombre_area ,
                _activo_area ,
		_id_centro_area );
END $$

-- editar area

DROP PROCEDURE IF EXISTS editar_area $$
CREATE PROCEDURE editar_area (
	IN _id_area INT , 
	IN _nombre_area VARCHAR(100),
        IN _activo_area BIT(1) ,
	IN _id_centro_area VARCHAR(10)) 
BEGIN
	UPDATE area 
	SET nombre_area = _nombre_area,
            activo_area = _activo_area,
            id_centro_area = _id_centro_area 
	WHERE id_area = _id_area;
END $$

-- eliminar area

DROP PROCEDURE IF EXISTS eliminar_area $$
CREATE PROCEDURE eliminar_area (
	IN _id_area INT )
BEGIN
	DELETE FROM area
	WHERE id_area = _id_area;
END $$

-- ver area

DROP PROCEDURE IF EXISTS ver_area $$
CREATE PROCEDURE ver_area (
	IN _id_area INT ) 
BEGIN
	SELECT id_area , 
	nombre_area ,
        activo_area ,
	id_centro_area 
	FROM area
	WHERE id_area = _id_area;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP AUTOR
-- -----------------------------------------------------
DELIMITER $$

-- insertar autor

DROP PROCEDURE IF EXISTS insertar_autor $$
CREATE PROCEDURE insertar_autor (
	IN _id_funcionario_autor INT ,
	IN _id_version_autor INT ) 
BEGIN
	INSERT INTO autor 
	VALUES (
		_id_funcionario_autor,
		_id_version_autor);
END $$

-- eliminar autor

DROP PROCEDURE IF EXISTS eliminar_autor $$
CREATE PROCEDURE eliminar_autor (
	IN _id_funcionario_autor INT ,
	IN _id_version_autor INT )
BEGIN
	DELETE FROM autor
	WHERE id_funcionario_autor = _id_funcionario_autor AND 
	id_version_autor = _id_version_autor;
END $$

-- ver autor

DROP PROCEDURE IF EXISTS ver_autor $$
CREATE PROCEDURE ver_autor (
	IN _id_funcionario_autor INT ,
	IN _id_version_autor INT )BEGIN
	SELECT id_funcionario_autor ,
	id_version_autor
	FROM autor
	WHERE id_funcionario_autor = _id_funcionario_autor AND 
	id_version_autor = _id_version_autor;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP CATEGORIA
-- -----------------------------------------------------
DELIMITER $$

-- insertar categoria

DROP PROCEDURE IF EXISTS insertar_categoria $$
CREATE PROCEDURE insertar_categoria (
	IN _nombre_categoria VARCHAR(50),
        IN _activo_categoria BIT(1),
	IN _id_centro_categoria VARCHAR(10))
BEGIN
	INSERT INTO categoria (
            nombre_categoria ,
            activo_categoria ,
            id_centro_categoria )
	VALUES (
		_nombre_categoria,
                _activo_categoria ,
		_id_centro_categoria);
END $$

-- editar categoria

DROP PROCEDURE IF EXISTS editar_categoria $$
CREATE PROCEDURE editar_categoria (
	IN _id_categoria INT ,
	IN _nombre_categoria VARCHAR(50),
        IN _activo_categoria BIT(1),
	IN _id_centro_categoria VARCHAR(10))
BEGIN
	UPDATE categoria
	SET nombre_categoria = _nombre_categoria,
                activo_categoria = _activo_categoria,
		id_centro_categoria = _id_centro_categoria
	WHERE id_categoria = _id_categoria;
END $$

-- eliminar categoria

DROP PROCEDURE IF EXISTS eliminar_categoria $$
CREATE PROCEDURE eliminar_categoria (
	IN _id_categoria INT )
BEGIN
	DELETE FROM categoria
	WHERE id_categoria = _id_categoria;
END $$

-- ver categoria

DROP PROCEDURE IF EXISTS ver_categoria $$
CREATE PROCEDURE ver_categoria (
	IN _id_categoria INT )
BEGIN
	SELECT id_categoria ,
	nombre_categoria ,
        activo_categoria ,
	id_centro_categoria
	FROM categoria
	WHERE id_categoria = _id_categoria;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP CATEGORIA_PRODUCTO
-- -----------------------------------------------------
DELIMITER $$

-- insertar categoria_producto

DROP PROCEDURE IF EXISTS insertar_categoria_producto $$
CREATE PROCEDURE insertar_categoria_producto (
	IN _id_categoria_cat_prod INT ,
	IN _id_producto_cat_prod INT )
BEGIN
	INSERT INTO categoria_producto
	VALUES (
		_id_categoria_cat_prod,
		_id_producto_cat_prod );
END $$

-- eliminar categoria_producto

DROP PROCEDURE IF EXISTS eliminar_categoria_producto $$
CREATE PROCEDURE eliminar_categoria_producto (
	IN _id_categoria_cat_prod INT ,
	IN _id_producto_cat_prod INT )
BEGIN
	DELETE FROM categoria_producto
	WHERE id_categoria_cat_prod = _id_categoria_cat_prod AND
		id_producto_cat_prod = _id_producto_cat_prod;
END $$

-- ver categoria_producto

DROP PROCEDURE IF EXISTS ver_categoria_producto $$
CREATE PROCEDURE ver_categoria_producto (
	IN _id_categoria_cat_prod INT ,
	IN _id_producto_cat_prod INT )
BEGIN
	SELECT id_categoria_cat_prod,
	id_producto_cat_prod
	FROM categoria_producto
	WHERE id_categoria_cat_prod = _id_categoria_cat_prod AND
		id_producto_cat_prod = _id_producto_cat_prod;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP CENTRO
-- -----------------------------------------------------
DELIMITER $$

-- insertar centro

DROP PROCEDURE IF EXISTS insertar_centro $$
CREATE PROCEDURE insertar_centro (
        IN _id_centro VARCHAR(10),
	IN _nombre_centro VARCHAR(200),
	IN _id_regional_centro VARCHAR(10),
	IN _id_ciudad_centro VARCHAR(10))
BEGIN
	INSERT INTO centro 
	VALUES (
                _id_centro,
		_nombre_centro,
		_id_regional_centro,
		_id_ciudad_centro );
END $$

-- editar centro

DROP PROCEDURE IF EXISTS editar_centro $$
CREATE PROCEDURE editar_centro (
	IN _id_centro VARCHAR(10),
	IN _nombre_centro VARCHAR(200),
	IN _id_regional_centro VARCHAR(10),
	IN _id_ciudad_centro VARCHAR(10))
BEGIN
	UPDATE centro
	SET nombre_centro = _nombre_centro ,
		id_regional_centro = _id_regional_centro ,
		id_ciudad_centro = _id_ciudad_centro 
	WHERE id_centro = _id_centro ;
END $$

-- eliminar centro

DROP PROCEDURE IF EXISTS eliminar_centro $$
CREATE PROCEDURE eliminar_centro (
	IN _id_centro VARCHAR(10))
BEGIN
	DELETE FROM centro
	WHERE id_centro = _id_centro ;
END $$

-- ver centro

DROP PROCEDURE IF EXISTS ver_centro $$
CREATE PROCEDURE ver_centro (
	IN _id_centro VARCHAR(10))
BEGIN
	SELECT id_centro ,
	nombre_centro ,
	id_regional_centro ,
	id_ciudad_centro
	FROM centro
	WHERE id_centro = _id_centro ;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP CIUDAD
-- -----------------------------------------------------
DELIMITER $$

-- insertar ciudad

DROP PROCEDURE IF EXISTS insertar_ciudad $$
CREATE PROCEDURE insertar_ciudad (
	IN _id_ciudad VARCHAR(10),
	IN _nombre_ciudad VARCHAR(45))
BEGIN
	INSERT INTO ciudad
	VALUES (
		_id_ciudad ,
		_nombre_ciudad );
END $$

-- editar ciudad

DROP PROCEDURE IF EXISTS editar_ciudad $$
CREATE PROCEDURE editar_ciudad (
	IN _id_ciudad VARCHAR(10),
	IN _nombre_ciudad VARCHAR(45))
BEGIN
	UPDATE ciudad
	SET nombre_ciudad = _nombre_ciudad
	WHERE id_ciudad = _id_ciudad ;
END $$

-- eliminar ciudad

DROP PROCEDURE IF EXISTS eliminar_ciudad $$
CREATE PROCEDURE eliminar_ciudad (
	IN _id_ciudad VARCHAR(10))
BEGIN
	DELETE FROM ciudad
	WHERE id_ciudad = _id_ciudad ;
END $$

-- ver ciudad

DROP PROCEDURE IF EXISTS ver_ciudad $$
CREATE PROCEDURE ver_ciudad (
	IN _id_ciudad VARCHAR(10))
BEGIN
	SELECT id_ciudad ,
	nombre_ciudad
	FROM ciudad
	WHERE id_ciudad = _id_ciudad ;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP COMENTARIO
-- -----------------------------------------------------
DELIMITER $$

-- insertar comentario

DROP PROCEDURE IF EXISTS insertar_comentario $$
CREATE PROCEDURE insertar_comentario (
	IN _valoracion_comentario VARCHAR(45) ,
	IN _puntuacion_comentario INT ,
	IN _fecha_comentario DATE ,
	IN _id_producto_comentario INT ,
        IN _id_funcionario_comentario INT )
BEGIN
	INSERT INTO comentario(
		valoracion_comentario ,
		puntuacion_comentario ,
		fecha_comentario ,
		id_producto_comentario ,
                id_funcionario_comentario )
	VALUES (
		_valoracion_comentario ,
		_puntuacion_comentario ,
		_fecha_comentario ,
		_id_producto_comentario ,
                _id_funcionario_comentario );
END $$

-- editar comentario

DROP PROCEDURE IF EXISTS editar_comentario $$
CREATE PROCEDURE editar_comentario (
	IN _id_comentario INT ,
	IN _valoracion_comentario VARCHAR(45) ,
	IN _puntuacion_comentario INT ,
	IN _fecha_comentario DATE ,
	IN _id_producto_comentario INT ,
        IN _id_funcionario_comentario INT )
BEGIN
	UPDATE comentario
	SET valoracion_comentario = _valoracion_comentario ,
		puntuacion_comentario = _puntuacion_comentario ,
		fecha_comentario = _fecha_comentario ,
		id_producto_comentario = _id_producto_comentario ,
                id_funcionario_comentario = _id_funcionario_comentario
	WHERE id_comentario = _id_comentario ;
END $$

-- eliminar comentario

DROP PROCEDURE IF EXISTS eliminar_comentario $$
CREATE PROCEDURE eliminar_comentario (
	IN _id_comentario INT )
BEGIN
	DELETE FROM comentario
	WHERE id_comentario = _id_comentario ;
END $$

-- ver comentario

DROP PROCEDURE IF EXISTS ver_comentario $$
CREATE PROCEDURE ver_comentario (
	IN _id_comentario INT )
BEGIN
	SELECT id_comentario ,
	valoracion_comentario ,
	puntuacion_comentario ,
	fecha_comentario ,
	id_producto_comentario ,
        id_funcionario_comentario
	FROM comentario
	WHERE id_comentario = _id_comentario ;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP ITEM_LISTA
-- -----------------------------------------------------
DELIMITER $$

-- insertar item_lista

DROP PROCEDURE IF EXISTS insertar_item_lista $$
CREATE PROCEDURE insertar_item_lista (
	IN _id_lista_item_lista INT ,
	IN _id_item_item_lista INT )
BEGIN
	INSERT INTO item_lista(
		id_lista_item_lista ,
		id_item_item_lista )
	VALUES (
		_id_lista_item_lista ,
		_id_item_item_lista );
END $$

-- eliminar item_lista

DROP PROCEDURE IF EXISTS eliminar_item_lista $$
CREATE PROCEDURE eliminar_item_lista (
	IN _id_lista_item_lista INT ,
	IN _id_item_item_lista INT )
BEGIN
	DELETE FROM item_lista
	WHERE id_lista_item_lista = _id_lista_item_lista AND
            id_item_item_lista = _id_item_item_lista;
END $$

-- ver item_lista

DROP PROCEDURE IF EXISTS ver_item_lista $$
CREATE PROCEDURE ver_item_lista (
	IN _id_lista_item_lista INT ,
	IN _id_item_item_lista INT )
BEGIN
	SELECT 
            id_lista_item_lista ,
            id_item_item_lista
	FROM item_lista
	WHERE id_lista_item_lista = _id_lista_item_lista AND
            id_item_item_lista = _id_item_item_lista;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP ESTADO
-- -----------------------------------------------------

DELIMITER $$

-- insertar estado

DROP PROCEDURE IF EXISTS insertar_estado $$
CREATE PROCEDURE insertar_estado (
	IN _nombre_estado VARCHAR(45)) 
BEGIN
	INSERT INTO estado (
		nombre_estado )
	VALUES (
		_nombre_estado );
END $$

-- editar estado

DROP PROCEDURE IF EXISTS editar_estado $$
CREATE PROCEDURE editar_estado (
	IN _id_estado INT , 
	IN _nombre_estado VARCHAR(45)) 
BEGIN
	UPDATE estado 
	SET nombre_estado = _nombre_estado 
	WHERE id_estado = _id_estado;
END $$

-- eliminar estado

DROP PROCEDURE IF EXISTS eliminar_estado $$
CREATE PROCEDURE eliminar_estado (
	IN _id_estado INT )
BEGIN
	DELETE FROM estado
	WHERE id_estado=_id_estado;
END $$

-- ver estado

DROP PROCEDURE IF EXISTS ver_estado $$
CREATE PROCEDURE ver_estado (
	IN _id_estado INT ) 
BEGIN
	SELECT id_estado , 
	nombre_estado
	FROM estado 
	WHERE id_estado = _id_estado;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP EVALUACION_ITEM
-- -----------------------------------------------------

DELIMITER $$

-- insertar evaluacion_item

DROP PROCEDURE IF EXISTS insertar_evaluacion_item $$
CREATE PROCEDURE insertar_evaluacion_item (
	IN _calificacion_evaluacion_item BIT(1) ,
	IN _observacion_evaluacion_item VARCHAR(100) ,
	IN _id_evaluacion_lista_evaluacion_item INT ,
	IN _id_item_evaluacion_item INT )
BEGIN
	INSERT INTO evaluacion_item(
		calificacion_evaluacion_item ,
		observacion_evaluacion_item ,
		id_evaluacion_lista_evaluacion_item ,
		id_item_evaluacion_item )
	VALUES (
		_calificacion_evaluacion_item ,
		_observacion_evaluacion_item ,
		_id_evaluacion_lista_evaluacion_item ,
		_id_item_evaluacion_item );
END $$

-- editar evaluacion_item

DROP PROCEDURE IF EXISTS editar_evaluacion_item $$
CREATE PROCEDURE editar_evaluacion_item (
	IN _id_evaluacion_item INT , 
	IN _calificacion_evaluacion_item BIT(1) ,
	IN _observacion_evaluacion_item VARCHAR(100) ,
	IN _id_evaluacion_lista_evaluacion_item INT ,
	IN _id_item_evaluacion_item INT )
BEGIN
	UPDATE evaluacion_item
	SET calificacion_evaluacion_item = _calificacion_evaluacion_item ,
		observacion_evaluacion_item = _observacion_evaluacion_item ,
		id_evaluacion_lista_evaluacion_item = _id_evaluacion_lista_evaluacion_item ,
		id_item_evaluacion_item = _id_item_evaluacion_item 
	WHERE id_evaluacion_item = _id_evaluacion_item ;
END $$

-- eliminar evaluacion_item

DROP PROCEDURE IF EXISTS eliminar_evaluacion_item $$
CREATE PROCEDURE eliminar_evaluacion_item (
	IN _id_evaluacion_item INT )
BEGIN
	DELETE FROM evaluacion_item
	WHERE id_evaluacion_item = _id_evaluacion_item ;
END $$

-- ver evaluacion_item

DROP PROCEDURE IF EXISTS ver_evaluacion_item $$
CREATE PROCEDURE ver_evaluacion_item (
	IN _id_evaluacion_item INT ) 
BEGIN
	SELECT id_evaluacion_item ,
	calificacion_evaluacion_item ,
	observacion_evaluacion_item ,
	id_evaluacion_lista_evaluacion_item ,
	id_item_evaluacion_item 
	FROM evaluacion_item
	WHERE id_evaluacion_item = _id_evaluacion_item ;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP EVALUACION_LISTA
-- -----------------------------------------------------

DELIMITER $$

-- insertar evaluacion_lista

DROP PROCEDURE IF EXISTS insertar_evaluacion_lista $$
CREATE PROCEDURE insertar_evaluacion_lista (
	IN _id_version_evaluacion_lista INT ,
	IN _id_lista_evaluacion_lista INT ,
	IN _calificacion_evaluacion_lista BIT(1) ,
	IN _observaciones_evaluacion_lista VARCHAR(100) ,
	IN _fecha_evaluacion_lista DATE ,
	IN _id_evaluador_evaluacion_lista INT )
BEGIN
	INSERT INTO evaluacion_lista(
		id_version_evaluacion_lista ,
		id_lista_evaluacion_lista ,
		calificacion_evaluacion_lista ,
		observaciones_evaluacion_lista ,
		fecha_evaluacion_lista ,
		id_evaluador_evaluacion_lista )
	VALUES (
		_id_version_evaluacion_lista ,
		_id_lista_evaluacion_lista ,
		_calificacion_evaluacion_lista ,
		_observaciones_evaluacion_lista ,
		_fecha_evaluacion_lista ,
		_id_evaluador_evaluacion_lista );
END $$

-- editar evaluacion_lista

DROP PROCEDURE IF EXISTS editar_evaluacion_lista $$
CREATE PROCEDURE editar_evaluacion_lista (
	IN _id_evaluacion_lista INT ,
	IN _id_version_evaluacion_lista INT ,
	IN _id_lista_evaluacion_lista INT ,
	IN _calificacion_evaluacion_lista BIT(1) ,
	IN _observaciones_evaluacion_lista VARCHAR(100) ,
	IN _fecha_evaluacion_lista DATE ,
	IN _id_evaluador_evaluacion_lista INT )
BEGIN
	UPDATE evaluacion_lista
	SET id_version_evaluacion_lista = _id_version_evaluacion_lista ,
		id_lista_evaluacion_lista = _id_lista_evaluacion_lista ,
		calificacion_evaluacion_lista = _calificacion_evaluacion_lista ,
		observaciones_evaluacion_lista = _observaciones_evaluacion_lista ,
		fecha_evaluacion_lista = _fecha_evaluacion_lista ,
		id_evaluador_evaluacion_lista = _id_evaluador_evaluacion_lista 
	WHERE id_evaluacion_lista = _id_evaluacion_lista ;
END $$

-- eliminar evaluacion_lista

DROP PROCEDURE IF EXISTS eliminar_evaluacion_lista $$
CREATE PROCEDURE eliminar_evaluacion_lista (
	IN _id_evaluacion_lista INT )
BEGIN
	DELETE FROM evaluacion_lista
	WHERE id_evaluacion_lista = _id_evaluacion_lista ;
END $$

-- ver evaluacion_lista

DROP PROCEDURE IF EXISTS ver_evaluacion_lista $$
CREATE PROCEDURE ver_evaluacion_lista (
	IN _id_evaluacion_lista INT ) 
BEGIN
	SELECT id_evaluacion_lista ,
	id_version_evaluacion_lista ,
	id_lista_evaluacion_lista ,
	calificacion_evaluacion_lista ,
	observaciones_evaluacion_lista ,
	fecha_evaluacion_lista ,
	id_evaluador_evaluacion_lista
	FROM evaluacion_lista
	WHERE id_evaluacion_lista = _id_evaluacion_lista ;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP FUNCIONARIO
-- -----------------------------------------------------

DELIMITER $$

-- insertar funcionario

DROP PROCEDURE IF EXISTS insertar_funcionario $$
CREATE PROCEDURE insertar_funcionario (
    IN _activo_funcionario BIT(1) ,
    IN _id_tipo_documento_funcionario INT ,
    IN _documento_funcionario VARCHAR(12) ,
    IN _correo_funcionario VARCHAR(100) ,
    IN _contrasena_funcionario VARCHAR(255) ,
    IN _nombre_funcionario VARCHAR(70) ,
    IN _apellido_funcionario VARCHAR(70) ,
    IN _telefono_funcionario VARCHAR(10) ,
    IN _id_centro_funcionario VARCHAR(10) 
    )
BEGIN
    INSERT INTO funcionario(
        activo_funcionario ,
        id_tipo_documento_funcionario ,
        documento_funcionario ,
        correo_funcionario ,
        contrasena_funcionario ,
        nombre_funcionario ,
        apellido_funcionario ,
        telefono_funcionario ,
        id_centro_funcionario )
    VALUES (
        _activo_funcionario ,
        _id_tipo_documento_funcionario ,
        _documento_funcionario ,
        _correo_funcionario ,
        _contrasena_funcionario ,
        _nombre_funcionario ,
        _apellido_funcionario ,
        _telefono_funcionario ,
        _id_centro_funcionario 
    );
END $$

-- editar funcionaro

DROP PROCEDURE IF EXISTS editar_funcionario $$
CREATE PROCEDURE editar_funcionario (
	IN _id_funcionario INT ,
	IN _activo_funcionario BIT(1) ,
        IN _id_tipo_documento_funcionario INT ,
        IN _documento_funcionario VARCHAR(8) ,
	IN _correo_funcionario VARCHAR(100) ,
	IN _contrasena_funcionario VARCHAR(255) ,
	IN _nombre_funcionario VARCHAR(70) ,
	IN _apellido_funcionario VARCHAR(70) ,
	IN _telefono_funcionario VARCHAR(10) ,
	IN _id_centro_funcionario VARCHAR(10) )
BEGIN
	UPDATE funcionario
	SET activo_funcionario = _activo_funcionario ,
                id_tipo_documento_funcionario = _id_tipo_documento_funcionario ,
                documento_funcionario = _documento_funcionario ,
		correo_funcionario = _correo_funcionario ,
		contrasena_funcionario = _contrasena_funcionario ,
		nombre_funcionario = _nombre_funcionario ,
		apellido_funcionario = _apellido_funcionario ,
		telefono_funcionario = _telefono_funcionario ,
		id_centro_funcionario = _id_centro_funcionario ,
                activo_funcionario = _activo_funcionario
	WHERE id_funcionario = _id_funcionario ;
END $$

-- eliminar funcionario

DROP PROCEDURE IF EXISTS eliminar_funcionario $$
CREATE PROCEDURE eliminar_funcionario (
	IN _id_funcionario INT )
BEGIN
	DELETE FROM funcionario
	WHERE id_funcionario = _id_funcionario ;
END $$

-- ver funcionario

DROP PROCEDURE IF EXISTS ver_funcionario $$
CREATE PROCEDURE ver_funcionario (
	IN _id_funcionario INT ) 
BEGIN
	SELECT id_funcionario ,
        activo_funcionario,
        id_tipo_documento_funcionario ,
	documento_funcionario ,
	correo_funcionario ,
	contrasena_funcionario ,
	nombre_funcionario ,
	apellido_funcionario ,
	telefono_funcionario ,
	id_centro_funcionario
	FROM funcionario
	WHERE id_funcionario = _id_funcionario ;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP FUNCIONARIO_ROL
-- -----------------------------------------------------

DELIMITER $$

-- insertar funcionario_rol

DROP PROCEDURE IF EXISTS insertar_funcionario_rol $$
CREATE PROCEDURE insertar_funcionario_rol (
	IN _id_funcionario_funcionario_rol INT ,
	IN _id_rol_funcionario_rol INT )
BEGIN
	INSERT INTO funcionario_rol
	VALUES (
		_id_funcionario_funcionario_rol ,
		_id_rol_funcionario_rol );
END $$

-- eliminar funcionario_rol

DROP PROCEDURE IF EXISTS eliminar_funcionario_rol $$
CREATE PROCEDURE eliminar_funcionario_rol (
	IN _id_funcionario_funcionario_rol INT ,
	IN _id_rol_funcionario_rol INT )
BEGIN
	DELETE FROM funcionario_rol
	WHERE id_funcionario_funcionario_rol = _id_funcionario_funcionario_rol AND
		id_rol_funcionario_rol = _id_rol_funcionario_rol ;
END $$

-- ver funcionario_rol

DROP PROCEDURE IF EXISTS ver_funcionario_rol $$
CREATE PROCEDURE ver_funcionario_rol (
	IN _id_funcionario_funcionario_rol INT ,
	IN _id_rol_funcionario_rol INT )
BEGIN
	SELECT id_funcionario_funcionario_rol ,
	id_rol_funcionario_rol
	FROM funcionario_rol
	WHERE id_funcionario_funcionario_rol = _id_funcionario_funcionario_rol AND
		id_rol_funcionario_rol = _id_rol_funcionario_rol ;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP ITEM
-- -----------------------------------------------------

DELIMITER $$

-- insertar item

DROP PROCEDURE IF EXISTS insertar_item $$
CREATE PROCEDURE insertar_item (
	IN _descriptor_item VARCHAR(200) ,
	IN _id_autor_item INT )
BEGIN
	INSERT INTO item(
		descriptor_item ,
		id_autor_item )
	VALUES (
		_descriptor_item ,
		_id_autor_item );
END $$

-- editar item

DROP PROCEDURE IF EXISTS editar_item $$
CREATE PROCEDURE editar_item (
	IN _id_item INT ,
	IN _descriptor_item VARCHAR(200) ,
	IN _id_autor_item INT )
BEGIN
	UPDATE item
	SET descriptor_item = _descriptor_item ,
		id_autor_item = _id_autor_item 
	WHERE id_item = _id_item ;
END $$

-- eliminar item

DROP PROCEDURE IF EXISTS eliminar_item $$
CREATE PROCEDURE eliminar_item (
	IN _id_item INT )
BEGIN
	DELETE FROM item
	WHERE id_item = _id_item ;
END $$

-- ver item

DROP PROCEDURE IF EXISTS ver_item $$
CREATE PROCEDURE ver_item (
	IN _id_item INT )
BEGIN
	SELECT id_item ,
	descriptor_item ,
	id_autor_item
	FROM item
	WHERE id_item = _id_item ;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP LISTA
-- -----------------------------------------------------

DELIMITER $$

-- insertar lista

DROP PROCEDURE IF EXISTS insertar_lista $$
CREATE PROCEDURE insertar_lista (
	IN _nombre_lista VARCHAR(100) ,
	IN _descripcion_lista VARCHAR(255) ,
	IN _fecha_lista DATE ,
	IN _id_autor_lista INT ,
        IN _activo_lista BIT(1) ,
        IN _id_tipo_lista_lista INT )
BEGIN
	INSERT INTO lista(
		nombre_lista ,
		descripcion_lista ,
		fecha_lista ,
		id_autor_lista ,
                activo_lista ,
                id_tipo_lista_lista)
	VALUES (
		_nombre_lista ,
		_descripcion_lista ,
		_fecha_lista ,
		_id_autor_lista ,
                _activo_lista ,
                _id_tipo_lista_lista );
END $$

-- editar lista

DROP PROCEDURE IF EXISTS editar_lista $$
CREATE PROCEDURE editar_lista (
	IN _id_lista INT ,
	IN _nombre_lista VARCHAR(100) ,
	IN _descripcion_lista VARCHAR(255) ,
	IN _fecha_lista DATE ,
	IN _id_autor_lista INT ,
        IN _activo_lista BIT(1) ,
        IN _id_tipo_lista_lista INT )
BEGIN
	UPDATE lista
	SET nombre_lista = _nombre_lista ,
		descripcion_lista = _descripcion_lista ,
		fecha_lista = _fecha_lista ,
		id_autor_lista = _id_autor_lista ,
                activo_lista = _activo_lista ,
                id_tipo_lista_lista = _id_tipo_lista_lista
	WHERE id_lista = _id_lista ;
END $$

-- eliminar lista

DROP PROCEDURE IF EXISTS eliminar_lista $$
CREATE PROCEDURE eliminar_lista (
	IN _id_lista INT )
BEGIN
	DELETE FROM lista
	WHERE id_lista = _id_lista ;
END $$

-- ver lista

DROP PROCEDURE IF EXISTS ver_lista $$
CREATE PROCEDURE ver_lista (
	IN _id_lista INT )
BEGIN
	SELECT id_lista ,
	nombre_lista ,
	descripcion_lista ,
	fecha_lista ,
	id_autor_lista ,
        activo_lista ,
        id_tipo_lista_lista 
	FROM lista
	WHERE id_lista = _id_lista ;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP MENSAJE
-- -----------------------------------------------------

DELIMITER $$

-- insertar mensaje

DROP PROCEDURE IF EXISTS insertar_mensaje $$
CREATE PROCEDURE insertar_mensaje (
	IN _texto_mensaje VARCHAR(100) )
BEGIN
	INSERT INTO mensaje(
		texto_mensaje )
	VALUES (
		_texto_mensaje );
END $$

-- editar mensaje

DROP PROCEDURE IF EXISTS editar_mensaje $$
CREATE PROCEDURE editar_mensaje (
	IN _id_mensaje INT ,
	IN _texto_mensaje VARCHAR(100) )
BEGIN
	UPDATE mensaje
	SET texto_mensaje = _texto_mensaje
	WHERE id_mensaje = _id_mensaje ;
END $$

-- eliminar mensaje

DROP PROCEDURE IF EXISTS eliminar_mensaje $$
CREATE PROCEDURE eliminar_mensaje (
	IN _id_mensaje INT )
BEGIN
	DELETE FROM mensaje
	WHERE id_mensaje = _id_mensaje ;
END $$

-- ver mensaje

DROP PROCEDURE IF EXISTS ver_mesaje $$
CREATE PROCEDURE ver_mensaje (
	IN _id_mensaje INT )
BEGIN
	SELECT 
            id_mensaje ,
            texto_mensaje
	FROM mensaje
	WHERE id_mensaje = _id_mensaje ;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP NOTIFICACION
-- -----------------------------------------------------

DELIMITER $$

-- insertar notificacion

DROP PROCEDURE IF EXISTS insertar_notificacion $$
CREATE PROCEDURE insertar_notificacion (
	IN _visto_notificacion BIT(1) ,
        IN _id_mensaje_notificacion INT ,
        IN _id_version_notificacion INT ,
        IN _id_funcionario_notificacion INT ,
        IN _id_rol_notificacion INT )
BEGIN
	INSERT INTO notificacion(
		visto_notificacion ,
                id_mensaje_notificacion ,
                id_version_notificacion ,
                id_funcionario_notificacion ,
                id_rol_notificacion )
	VALUES (
		_visto_notificacion ,
                _id_mensaje_notificacion ,
                _id_version_notificacion ,
                _id_funcionario_notificacion ,
                _id_rol_notificacion );
END $$

-- editar notificacion

DROP PROCEDURE IF EXISTS editar_notificacion $$
CREATE PROCEDURE editar_notificacion (
	IN _id_notificacion INT ,
	IN _visto_notificacion BIT(1) ,
        IN _id_mensaje_notificacion INT ,
        IN _id_version_notificacion INT ,
        IN _id_funcionario_notificacion INT ,
        IN _id_rol_notificacion INT )
BEGIN
	UPDATE notificacion
	SET     visto_notificacion = _visto_notificacion,
                id_mensaje_notificacion = _id_mensaje_notificacion ,
                id_version_notificacion = _id_version_notificacion ,
                id_funcionario_notificacion = _id_funcionario_notificacion ,
                id_rol_notificacion = _id_rol_notificacion
	WHERE id_notificacion = _id_notificacion ;
END $$

-- eliminar notificacion

DROP PROCEDURE IF EXISTS eliminar_notificacion $$
CREATE PROCEDURE eliminar_notificacion (
	IN _id_notificacion INT )
BEGIN
	DELETE FROM notificacion
	WHERE id_notificacion = _id_notificacion ;
END $$

-- ver notificacion

DROP PROCEDURE IF EXISTS ver_notificacion $$
CREATE PROCEDURE ver_notificacion (
	IN _id_notificacion INT )
BEGIN
	SELECT 
                id_notificacion ,
                visto_notificacion ,
                id_mensaje_notificacion ,
                id_version_notificacion ,
                id_funcionario_notificacion ,
                id_rol_notificacion
	FROM notificacion
	WHERE id_notificacion = _id_notificacion ;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP PRODUCTO
-- -----------------------------------------------------

DELIMITER $$

-- insertar producto

DROP PROCEDURE IF EXISTS insertar_producto $$
CREATE PROCEDURE insertar_producto (
	IN _nombre_producto VARCHAR(100) ,
	IN _descripcion_producto VARCHAR(255) ,
	IN _palabras_clave_producto VARCHAR(200) ,
	IN _id_tipo_objeto_aprendizaje_producto INT )
BEGIN
	INSERT INTO producto(
		nombre_producto ,
		descripcion_producto ,
		palabras_clave_producto ,
		id_tipo_objeto_aprendizaje_producto )
	VALUES (
		_nombre_producto ,
		_descripcion_producto ,
		_palabras_clave_producto ,
		_id_tipo_objeto_aprendizaje_producto );
END $$

-- editar producto

DROP PROCEDURE IF EXISTS editar_producto $$
CREATE PROCEDURE editar_producto (
	IN _id_producto INT ,
	IN _nombre_producto VARCHAR(100) ,
	IN _descripcion_producto VARCHAR(255) ,
	IN _palabras_clave_producto VARCHAR(200) ,
	IN _id_tipo_objeto_aprendizaje_producto INT )
BEGIN
	UPDATE producto
	SET nombre_producto = _nombre_producto ,
		descripcion_producto = _descripcion_producto ,
		palabras_clave_producto = _palabras_clave_producto ,
		id_tipo_objeto_aprendizaje_producto = _id_tipo_objeto_aprendizaje_producto 
	WHERE id_producto = _id_producto ;
END $$

-- eliminar producto

DROP PROCEDURE IF EXISTS eliminar_producto $$
CREATE PROCEDURE eliminar_producto (
	IN _id_producto INT )
BEGIN
	DELETE FROM producto
	WHERE id_producto = _id_producto ;
END $$

-- ver producto

DROP PROCEDURE IF EXISTS ver_producto $$
CREATE PROCEDURE ver_producto (
	IN _id_producto INT  )
BEGIN
	SELECT id_producto ,
	nombre_producto ,
	descripcion_producto ,
	palabras_clave_producto ,
	id_tipo_objeto_aprendizaje_producto
	FROM producto
	WHERE id_producto = _id_producto ;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP PROGRAMA
-- -----------------------------------------------------

DELIMITER $$

-- insertar programa

DROP PROCEDURE IF EXISTS insertar_programa $$
CREATE PROCEDURE insertar_programa (
	IN _nombre_programa VARCHAR(50) ,
	IN _id_area_programa INT )
BEGIN
	INSERT INTO programa(
		nombre_programa ,
		id_area_programa )
	VALUES (
		_nombre_programa ,
		_id_area_programa );
END $$

-- editar programa

DROP PROCEDURE IF EXISTS editar_programa $$
CREATE PROCEDURE editar_programa (
	IN _id_programa INT ,
	IN _nombre_programa VARCHAR(50) ,
	IN _id_area_programa INT )
BEGIN
	UPDATE programa
	SET nombre_programa = _nombre_programa ,
		id_area_programa = _id_area_programa 
	WHERE id_programa = _id_programa ;
END $$

-- eliminar programa

DROP PROCEDURE IF EXISTS eliminar_programa $$
CREATE PROCEDURE eliminar_programa (
	IN _id_programa INT )
BEGIN
	DELETE FROM programa
	WHERE id_programa = _id_programa ;
END $$

-- ver programa

DROP PROCEDURE IF EXISTS ver_programa $$
CREATE PROCEDURE ver_programa (
	IN _id_programa INT )
BEGIN
	SELECT id_programa ,
	nombre_programa ,
	id_area_programa
	FROM programa
	WHERE id_programa = _id_programa ;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP PROGRAMA_PRODUCTO
-- -----------------------------------------------------

DELIMITER $$

-- insertar programa_producto

DROP PROCEDURE IF EXISTS insertar_programa_producto $$
CREATE PROCEDURE insertar_programa_producto (
	IN _id_producto_prog_prod INT ,
	IN _id_programa_prog_prod INT )
BEGIN
	INSERT INTO programa_producto
	VALUES (
		_id_producto_prog_prod ,
		_id_programa_prog_prod );
END $$

-- eliminar programa_producto

DROP PROCEDURE IF EXISTS eliminar_programa_producto $$
CREATE PROCEDURE eliminar_programa_producto (
	IN _id_producto_prog_prod INT ,
	IN _id_programa_prog_prod INT )
BEGIN
	DELETE FROM programa_producto
	WHERE id_producto_prog_prod = _id_producto_prog_prod AND
		id_programa_prog_prod = _id_programa_prog_prod ;
END $$

-- ver programa_producto

DROP PROCEDURE IF EXISTS ver_programa_producto $$
CREATE PROCEDURE ver_programa_producto (
	IN _id_producto_prog_prod INT ,
	IN _id_programa_prog_prod INT )
BEGIN
	SELECT id_producto_prog_prod ,
	id_programa_prog_prod
	FROM programa_producto
	WHERE id_producto_prog_prod = _id_producto_prog_prod AND
		id_programa_prog_prod = _id_programa_prog_prod ;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP REGIONAL
-- -----------------------------------------------------

DELIMITER $$

-- insertar regional

DROP PROCEDURE IF EXISTS insertar_regional $$
CREATE PROCEDURE insertar_regional (
	IN _id_regional VARCHAR(10) ,
	IN _nombre_regional VARCHAR(50) )
BEGIN
	INSERT INTO regional
	VALUES (
		_id_regional ,
		_nombre_regional );
END $$

-- editar regional

DROP PROCEDURE IF EXISTS editar_regional $$
CREATE PROCEDURE editar_regional (
	IN _id_regional VARCHAR(10) ,
	IN _nombre_regional VARCHAR(50) )
BEGIN
	UPDATE regional
	SET nombre_regional = _nombre_regional 
	WHERE id_regional = _id_regional ;
END $$

-- eliminar regional

DROP PROCEDURE IF EXISTS eliminar_regional $$
CREATE PROCEDURE eliminar_regional (
	IN _id_regional VARCHAR(10) )
BEGIN
	DELETE FROM regional
	WHERE id_regional = _id_regional ;
END $$

-- ver regional

DROP PROCEDURE IF EXISTS ver_regional $$
CREATE PROCEDURE ver_regional (
	IN _id_regional VARCHAR(10) )
BEGIN
	SELECT id_regional ,
	nombre_regional
	FROM regional
	WHERE id_regional = _id_regional ;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP ROL
-- -----------------------------------------------------

DELIMITER $$

-- insertar rol

DROP PROCEDURE IF EXISTS insertar_rol $$
CREATE PROCEDURE insertar_rol (
	IN _nombre_rol VARCHAR(45) )
BEGIN
	INSERT INTO rol(
		nombre_rol )
	VALUES (
		_nombre_rol );
END $$

-- editar rol

DROP PROCEDURE IF EXISTS editar_rol $$
CREATE PROCEDURE editar_rol (
	IN _id_rol INT ,
	IN _nombre_rol VARCHAR(45) )
BEGIN
	UPDATE rol
	SET nombre_rol = _nombre_rol 
	WHERE id_rol = _id_rol ;
END $$

-- eliminar rol

DROP PROCEDURE IF EXISTS eliminar_rol $$
CREATE PROCEDURE eliminar_rol (
	IN _id_rol INT )
BEGIN
	DELETE FROM rol
	WHERE id_rol = _id_rol ;
END $$

-- ver rol

DROP PROCEDURE IF EXISTS ver_rol $$
CREATE PROCEDURE ver_rol (
	IN _id_rol INT )
BEGIN
	SELECT id_rol ,
	nombre_rol 
	FROM rol
	WHERE id_rol = _id_rol ;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP TIPO_ARCHIVO
-- -----------------------------------------------------
DELIMITER $$

-- insertar tipo_archivo

DROP PROCEDURE IF EXISTS insertar_tipo_archivo $$
CREATE PROCEDURE insertar_tipo_archivo (
	IN _extension_tipo_archivo VARCHAR(7) ) 
BEGIN
	INSERT INTO tipo_archivo (
		extension_tipo_archivo )
	VALUES (
		_extension_tipo_archivo );
END $$

-- editar tipo_archivo

DROP PROCEDURE IF EXISTS editar_tipo_archivo $$
CREATE PROCEDURE editar_tipo_archivo (
	IN _id_tipo_archivo INT , 
	IN _extension_tipo_archivo VARCHAR(7) ) 
BEGIN
	UPDATE tipo_archivo 
	SET extension_tipo_archivo = _extension_tipo_archivo
	WHERE id_tipo_archivo = _id_tipo_archivo ;
END $$

-- eliminar tipo_archivo

DROP PROCEDURE IF EXISTS eliminar_tipo_archivo $$
CREATE PROCEDURE eliminar_tipo_archivo (
	IN _id_tipo_archivo INT )
BEGIN
	DELETE FROM tipo_archivo
	WHERE id_tipo_archivo = _id_tipo_archivo ;
END $$

-- ver tipo_archivo

DROP PROCEDURE IF EXISTS ver_tipo_archivo $$
CREATE PROCEDURE ver_tipo_archivo (
	IN _id_tipo_archivo INT ) 
BEGIN
	SELECT id_tipo_archivo , 
	extension_tipo_archivo 
	FROM tipo_archivo
	WHERE id_tipo_archivo = _id_tipo_archivo ;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP TIPO_DOCUMENTO
-- -----------------------------------------------------
DELIMITER $$

-- insertar tipo_documento

DROP PROCEDURE IF EXISTS insertar_tipo_documento $$
CREATE PROCEDURE insertar_tipo_documento (
	IN _nombre_tipo_documento VARCHAR(30) ) 
BEGIN
	INSERT INTO tipo_documento (
		nombre_tipo_documento )
	VALUES (
		_nombre_tipo_documento );
END $$

-- editar tipo_documento

DROP PROCEDURE IF EXISTS editar_tipo_documento $$
CREATE PROCEDURE editar_tipo_documento (
	IN _id_tipo_documento INT , 
	IN _nombre_tipo_documento VARCHAR(30) ) 
BEGIN
	UPDATE tipo_documento 
	SET nombre_tipo_documento = _nombre_tipo_documento
	WHERE id_tipo_documento = _id_tipo_documento ;
END $$

-- eliminar tipo_documento

DROP PROCEDURE IF EXISTS eliminar_tipo_documento $$
CREATE PROCEDURE eliminar_tipo_documento (
	IN _id_tipo_documento INT )
BEGIN
	DELETE FROM tipo_documento
	WHERE id_tipo_documento = _id_tipo_documento ;
END $$

-- ver tipo_documento

DROP PROCEDURE IF EXISTS ver_tipo_documento $$
CREATE PROCEDURE ver_tipo_documento (
	IN _id_tipo_documento INT ) 
BEGIN
	SELECT id_tipo_documento ,
        nombre_tipo_documento
	FROM tipo_documento
	WHERE id_tipo_documento = _id_tipo_documento ;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP TIPO_LISTA
-- -----------------------------------------------------
DELIMITER $$

-- insertar tipo_lista

DROP PROCEDURE IF EXISTS insertar_tipo_lista $$
CREATE PROCEDURE insertar_tipo_lista (
	IN _nombre_tipo_lista VARCHAR(30) ) 
BEGIN
	INSERT INTO tipo_lista (
		nombre_tipo_lista )
	VALUES (
		_nombre_tipo_lista );
END $$

-- editar tipo_lista

DROP PROCEDURE IF EXISTS editar_tipo_lista $$
CREATE PROCEDURE editar_tipo_lista (
	IN _id_tipo_lista INT , 
	IN _nombre_tipo_lista VARCHAR(30) ) 
BEGIN
	UPDATE tipo_lista 
	SET nombre_tipo_lista = _nombre_tipo_lista
	WHERE id_tipo_lista = _id_tipo_lista ;
END $$

-- eliminar tipo_lista

DROP PROCEDURE IF EXISTS eliminar_tipo_lista $$
CREATE PROCEDURE eliminar_tipo_lista (
	IN _id_tipo_lista INT )
BEGIN
	DELETE FROM tipo_lista
	WHERE id_tipo_lista = _id_tipo_lista ;
END $$

-- ver tipo_lista

DROP PROCEDURE IF EXISTS ver_tipo_lista $$
CREATE PROCEDURE ver_tipo_lista (
	IN _id_tipo_lista INT ) 
BEGIN
	SELECT id_tipo_lista ,
        nombre_tipo_lista
	FROM tipo_lista
	WHERE id_tipo_lista = _id_tipo_lista ;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP TIPO_OBJETO_APRENDIZAJE
-- -----------------------------------------------------
DELIMITER $$

-- insertar tipo_objeto_aprendizaje

DROP PROCEDURE IF EXISTS insertar_tipo_objeto_aprendizaje $$
CREATE PROCEDURE insertar_tipo_objeto_aprendizaje (
	IN _nombre_tipo_obj_apren VARCHAR(20) ) 
BEGIN
	INSERT INTO tipo_objeto_aprendizaje(
		nombre_tipo_obj_apren )
	VALUES (
		_nombre_tipo_obj_apren );
END $$

-- editar tipo_objeto_aprendizaje

DROP PROCEDURE IF EXISTS editar_tipo_objeto_aprendizaje $$
CREATE PROCEDURE editar_tipo_objeto_aprendizaje (
	IN _id_tipo_objeto_aprendizaje INT , 
	IN _nombre_tipo_obj_apren VARCHAR(20) )  
BEGIN
	UPDATE tipo_objeto_aprendizaje
	SET nombre_tipo_obj_apren = _nombre_tipo_obj_apren 
	WHERE id_tipo_objeto_aprendizaje = _id_tipo_objeto_aprendizaje ;
END $$

-- eliminar tipo_objeto_aprendizaje

DROP PROCEDURE IF EXISTS eliminar_tipo_objeto_aprendizaje $$
CREATE PROCEDURE eliminar_tipo_objeto_aprendizaje (
	IN _id_tipo_objeto_aprendizaje INT )
BEGIN
	DELETE FROM tipo_objeto_aprendizaje
	WHERE id_tipo_objeto_aprendizaje = _id_tipo_objeto_aprendizaje ;
END $$

-- ver tipo_objeto_aprendizaje

DROP PROCEDURE IF EXISTS ver_tipo_objeto_aprendizaje $$
CREATE PROCEDURE ver_tipo_objeto_aprendizaje (
	IN _id_tipo_objeto_aprendizaje INT ) 
BEGIN
	SELECT id_tipo_objeto_aprendizaje , 
	nombre_tipo_obj_apren
	FROM tipo_objeto_aprendizaje
	WHERE id_tipo_objeto_aprendizaje = _id_tipo_objeto_aprendizaje ;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP VERSION
-- -----------------------------------------------------
DELIMITER $$

-- insertar version

DROP PROCEDURE IF EXISTS insertar_version $$
CREATE PROCEDURE insertar_version (
	IN _numero_version INT , 
	IN _url_version VARCHAR(500) , 
	IN _fecha_version DATE , 
	IN _fecha_caducidad_version DATE , 
	IN _fecha_aprobacion_version DATE , 
	IN _id_estado_version INT , 
	IN _id_tipo_archivo_version INT , 
	IN _id_producto_version INT , 
	IN _id_centro_version VARCHAR(10) )
BEGIN
	INSERT INTO version(
		numero_version ,
                url_version ,
                fecha_version ,
                fecha_caducidad_version ,
                fecha_aprobacion_version ,
                id_estado_version ,
                id_tipo_archivo_version ,
                id_producto_version ,
                id_centro_version)
	VALUES (
		_numero_version ,
                _url_version ,
                _fecha_version ,
                _fecha_caducidad_version ,
                _fecha_aprobacion_version ,
                _id_estado_version ,
                _id_tipo_archivo_version ,
                _id_producto_version ,
                _id_centro_version);
END $$

-- editar version

DROP PROCEDURE IF EXISTS editar_version $$
CREATE PROCEDURE editar_version (
	IN _id_version INT , 
	IN _numero_version INT , 
	IN _url_version VARCHAR(500) , 
	IN _fecha_version DATE , 
	IN _fecha_caducidad_version DATE , 
	IN _fecha_aprobacion_version DATE , 
	IN _id_estado_version INT , 
	IN _id_tipo_archivo_version INT , 
	IN _id_producto_version INT , 
	IN _id_centro_version VARCHAR(10) )
BEGIN
	UPDATE version
	SET numero_version = _numero_version ,
		url_version = _url_version ,
		fecha_version = _fecha_version ,
		fecha_caducidad_version = _fecha_caducidad_version ,
                fecha_aprobacion_version = _fecha_aprobacion_version ,
		id_estado_version = _id_estado_version ,
		id_tipo_archivo_version = _id_tipo_archivo_version ,
		id_producto_version = _id_producto_version ,
                id_centro_version = _id_centro_version
	WHERE id_version = _id_version ;
END $$

-- eliminar version

DROP PROCEDURE IF EXISTS eliminar_version $$
CREATE PROCEDURE eliminar_version (
	IN _id_version INT )
BEGIN
	DELETE FROM version
	WHERE id_version = _id_version ;
END $$

-- ver version

DROP PROCEDURE IF EXISTS ver_version $$
CREATE PROCEDURE ver_version (
	IN _id_version INT ) 
BEGIN
	SELECT id_version , 
	numero_version ,
        url_version ,
        fecha_version ,
        fecha_caducidad_version ,
        fecha_aprobacion_version ,
        id_estado_version ,
        id_tipo_archivo_version ,
        id_producto_version ,
        id_centro_version
	FROM version
	WHERE id_version = _id_version ;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP VISITA
-- -----------------------------------------------------
DELIMITER $$

-- insertar visita

DROP PROCEDURE IF EXISTS insertar_visita $$
CREATE PROCEDURE insertar_visita (
	IN _fecha_visita DATE ,
	IN _id_producto_visita INT ,
	IN _id_funcionario_visita INT ) 
BEGIN
	INSERT INTO visita(
		fecha_visita , 
		id_producto_visita ,
		id_funcionario_visita )
	VALUES (
		_fecha_visita , 
		_id_producto_visita ,
		_id_funcionario_visita );
END $$

-- editar visita

DROP PROCEDURE IF EXISTS editar_visita $$
CREATE PROCEDURE editar_visita (
        IN _id_visita INT ,
	IN _fecha_visita DATE ,
	IN _id_producto_visita INT ,
	IN _id_funcionario_visita INT )  
BEGIN
	UPDATE visita
	SET fecha_visita = _fecha_visita ,
		id_producto_visita = _id_producto_visita ,
		id_funcionario_visita = _id_funcionario_visita  
	WHERE id_visita = _id_visita ;
END $$

-- eliminar visita

DROP PROCEDURE IF EXISTS eliminar_visita $$
CREATE PROCEDURE eliminar_visita (
	IN _id_visita INT ) 
BEGIN
	DELETE FROM visita
	WHERE id_visita = _id_visita ;
END $$

-- ver visita

DROP PROCEDURE IF EXISTS ver_visita $$
CREATE PROCEDURE ver_visita (
	IN _id_visita INT )
BEGIN
	SELECT fecha_visita , 
	id_producto_visita ,
	id_funcionario_visita
	FROM visita
	WHERE id_visita = _id_visita ;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP VER_FUNCIONARIOS_CENTRO
-- -----------------------------------------------------

DELIMITER $$

DROP PROCEDURE IF EXISTS ver_funcionarios_centro $$
CREATE PROCEDURE ver_funcionarios_centro (
        IN _id_centro VARCHAR(10),
        IN _pagina INT,
        IN _funcionarioXpagina INT
    )
BEGIN
    DECLARE _inicio INT;
    DECLARE _fin INT;
    SET _inicio = (_pagina - 1) * _funcionarioXpagina;
    SELECT 
        id_funcionario ,
        id_tipo_documento_funcionario ,
        documento_funcionario,
        nombre_funcionario,
        apellido_funcionario,
        correo_funcionario
    FROM funcionario
    WHERE id_centro_funcionario = _id_centro AND activo_funcionario = 1
    LIMIT _inicio, _funcionarioXpagina ;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP REGISTRAR_FUNCIONARIO
-- -----------------------------------------------------

DELIMITER $$

DROP PROCEDURE IF EXISTS registrar_funcionario $$
CREATE PROCEDURE registrar_funcionario (
        IN _id_tipo_documento_funcionario INT ,
        IN _documento_funcionario VARCHAR(12) ,
        IN _correo_funcionario VARCHAR(100) ,
        IN _contrasena_funcionario VARCHAR(255) ,
        IN _nombre_funcionario VARCHAR(70) ,
        IN _apellido_funcionario VARCHAR(70) ,
        IN _telefono_funcionario VARCHAR(10) ,
        IN _id_centro VARCHAR(10)
    )
BEGIN
    CALL insertar_funcionario(
        1 ,
        _id_tipo_documento_funcionario ,
        _documento_funcionario ,
        _correo_funcionario ,
        _contrasena_funcionario ,
        _nombre_funcionario ,
        _apellido_funcionario ,
        _telefono_funcionario ,
        _id_centro);
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP INGRESO
-- -----------------------------------------------------

DELIMITER $$

DROP PROCEDURE IF EXISTS ingreso $$
CREATE PROCEDURE ingreso (
        IN _correo_funcionario VARCHAR(100)
    )
BEGIN
    SELECT id_funcionario ,
        activo_funcionario ,
        id_tipo_documento_funcionario ,
	documento_funcionario ,
    	contrasena_funcionario ,
	nombre_funcionario ,
	apellido_funcionario ,
	telefono_funcionario ,
	id_centro_funcionario
    FROM funcionario
    WHERE correo_funcionario = _correo_funcionario AND activo_funcionario = 1;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP VER_TODOS_TIPO_DOCUMENTO
-- -----------------------------------------------------

DELIMITER $$

DROP PROCEDURE IF EXISTS ver_todos_tipo_documento $$
CREATE PROCEDURE ver_todos_tipo_documento (
    )
BEGIN
    SELECT id_tipo_documento ,
        nombre_tipo_documento
    FROM tipo_documento ;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP VER_ROLES_FUNCIONARIO
-- -----------------------------------------------------

DELIMITER $$

DROP PROCEDURE IF EXISTS ver_roles_funcionario $$
CREATE PROCEDURE ver_roles_funcionario (
        IN _id_funcionario INT
    )
BEGIN
    SELECT fr.id_rol_funci_rol , r.nombre_rol
    FROM  funcionario_rol fr
    INNER JOIN rol r
    ON id_rol_funci_rol = id_rol
    WHERE id_funcionario_funci_rol = _id_funcionario;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP CONTEO_FUNCIONARIOS_CENTRO
-- -----------------------------------------------------

DELIMITER $$

DROP PROCEDURE IF EXISTS conteo_funcionarios_centro $$
CREATE PROCEDURE conteo_funcionarios_centro (
        IN _id_centro VARCHAR(10)
    )
BEGIN
    SELECT COUNT(id_funcionario) as conteo
    FROM  funcionario
    WHERE id_centro_funcionario = _id_centro AND activo_funcionario = 1;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP INHABILITAR_FUNCIONARIO
-- -----------------------------------------------------

DELIMITER $$

DROP PROCEDURE IF EXISTS inhabilitar_funcionario $$
CREATE PROCEDURE inhabilitar_funcionario (
        IN _id_funcionario INT
    )
BEGIN
    UPDATE funcionario
    SET activo_funcionario = 0
    WHERE id_funcionario = _id_funcionario;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- SP CAMBIO_CONTRASENA
-- -----------------------------------------------------

DELIMITER $$

DROP PROCEDURE IF EXISTS cambio_Contrasena $$
CREATE PROCEDURE cambio_Contrasena(
    in id INT, 
    in pass VARCHAR(255))
BEGIN
    UPDATE funcionario
    SET contrasena_funcionario = pass
    WHERE id_funcionario = id;
END $$
DELIMITER ;

-- -----------------------------------------------------
-- SP VER_FUNCIONARIO_CORREO
-- -----------------------------------------------------

DELIMITER $$

DROP PROCEDURE IF EXISTS ver_funcionario_correo $$
CREATE PROCEDURE ver_funcionario_correo(
 in _correo VARCHAR(100))
BEGIN
    SELECT id_funcionario
    FROM funcionario
    WHERE correo_funcionario = _correo;
END $$
DELIMITER ;

-- -----------------------------------------------------
-- SP VER_FUNCIONARIO_DOCUMENTO
-- -----------------------------------------------------

DELIMITER $$

DROP PROCEDURE IF EXISTS ver_funcionario_documento $$
CREATE PROCEDURE ver_funcionario_documento(
    in _documento VARCHAR(12) ,
    in _id_tipo_documento INT)
BEGIN
    SELECT id_funcionario
    FROM funcionario
    WHERE documento_funcionario = _documento AND id_tipo_documento_funcionario = _id_tipo_documento;
END $$
DELIMITER ;

-- -----------------------------------------------------
-- SP VER_FUNCIONARIO_ACTIVO
-- -----------------------------------------------------

DELIMITER $$

DROP PROCEDURE IF EXISTS ver_funcionario_activo $$
CREATE PROCEDURE ver_funcionario_activo(
    in _correo VARCHAR(100) ,
    in _id_tipo_documento INT ,
    in _documento VARCHAR(12))
BEGIN
    SELECT *
    FROM funcionario
    WHERE activo_funcionario = 1 AND(
    correo_funcionario = _correo
    OR (id_tipo_documento_funcionario = _id_tipo_documento 
        AND documento_funcionario = _documento)
    );
END $$
DELIMITER ;